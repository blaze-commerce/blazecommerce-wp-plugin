name: "Priority 2: Claude AI Code Review"

# COST OPTIMIZATION: Intelligent triggering with file filtering and conditional execution
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'tests/**'
      - 'test/**'
      - '**.txt'
      - 'README*'
      - 'CHANGELOG*'
      - '.gitignore'
      - 'package-lock.json'
      - 'composer.lock'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string
      force_sonnet:
        description: 'Force use of Claude Sonnet (bypass intelligent selection)'
        required: false
        type: boolean
        default: false

# COST OPTIMIZATION: Maintain existing concurrency pattern for priority queue system
concurrency:
  group: priority-2-claude-review-pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true  # Cancel previous runs to save costs

jobs:
  # COST OPTIMIZATION: Intelligent model selection and conditional execution
  cost-optimization-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # CONDITIONAL EXECUTION: Only run for external contributors or labeled PRs
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' ||
      github.event.pull_request.author_association == 'CONTRIBUTOR' ||
      contains(github.event.pull_request.labels.*.name, 'needs-review') ||
      contains(github.event.pull_request.labels.*.name, 'external-review')
    outputs:
      should_run: ${{ steps.execution-check.outputs.should_run }}
      model_selection: ${{ steps.model-selection.outputs.model }}
      model_reason: ${{ steps.model-selection.outputs.reason }}
      pr_number: ${{ steps.execution-check.outputs.pr_number }}
      cache_key: ${{ steps.cache-check.outputs.cache_key }}
      cache_hit: ${{ steps.cache-check.outputs.cache_hit }}
      validated_models: ${{ steps.api-key-validation.outputs.validated_models }}
      validation_status: ${{ steps.api-key-validation.outputs.validation_status }}
    steps:
      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Verify Authentication
        run: |
          echo "üîê AUTHENTICATION STATUS:"
          if [ -n "${{ steps.app_token.outputs.token }}" ]; then
            echo "‚úÖ GitHub App token generated successfully"
            echo "ü§ñ Using BlazeCommerce Automation Bot authentication"
          elif [ -n "${{ secrets.BOT_GITHUB_TOKEN }}" ]; then
            echo "‚ö†Ô∏è Using BOT_GITHUB_TOKEN fallback"
          else
            echo "‚ö†Ô∏è Using default github.token"
          fi
          echo "üìä Repository: ${{ github.repository }}"
          echo "üéØ Event: ${{ github.event_name }}"

      - name: Check Execution Conditions
        id: execution-check
        run: |
          echo "üí∞ COST OPTIMIZATION: Checking execution conditions"
          echo "=================================================="
          echo "Event: ${{ github.event_name }}"
          echo "Author Association: ${{ github.event.pull_request.author_association }}"
          echo "Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

          PR_NUMBER="${{ github.event.pull_request.number || github.event.inputs.pr_number }}"
          echo "PR Number: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT

      - name: Check for Review Cache
        id: cache-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            console.log('üí∞ COST OPTIMIZATION: Checking for review cache');

            const prNumber = ${{ github.event.pull_request.number || github.event.inputs.pr_number }};
            const sha = '${{ github.event.pull_request.head.sha }}';

            // Generate a cache key based on PR number and commit SHA
            const cacheKey = `claude-review-${prNumber}-${sha}`;
            console.log(`üìã Cache key: ${cacheKey}`);
            core.setOutput('cache_key', cacheKey);

            try {
              // Check if this commit has already been reviewed
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 30
              });

              // Look for Claude review comments that mention this specific commit
              const existingReview = comments.find(comment =>
                comment.body.includes('Claude AI PR Review Complete') &&
                comment.body.includes(sha.substring(0, 7))
              );

              if (existingReview) {
                console.log('‚úÖ CACHE HIT: Found existing Claude review for this commit');
                console.log(`üìÖ Review date: ${existingReview.created_at}`);
                console.log(`üîó Review URL: ${existingReview.html_url}`);
                core.setOutput('cache_hit', 'true');
              } else {
                console.log('‚ùå CACHE MISS: No existing review found for this commit');
                core.setOutput('cache_hit', 'false');
              }
            } catch (error) {
              console.error(`‚ùå ERROR checking cache: ${error.message}`);
              core.setOutput('cache_hit', 'false');
            }

      - name: API Key Validation
        id: api-key-validation
        run: |
          echo "üîë API KEY VALIDATION"
          echo "===================="

          # Check if API key is set
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "‚ùå ERROR: ANTHROPIC_API_KEY secret is not set!"
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            echo "validated_models=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ ANTHROPIC_API_KEY is configured"
          echo "üß™ Testing model availability in cost-ascending order..."

          # Models to test in cost order (cheapest to most expensive)
          models=("claude-3-haiku-20240307" "claude-3-5-sonnet-20240620")
          validated_models=()

          for model in "${models[@]}"; do
            echo "üîç Testing model: $model"

            # Test model with minimal API call
            http_code=$(curl -s -w "%{http_code}" -o /dev/null \
              -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
              -H "anthropic-version: 2023-06-01" \
              -H "content-type: application/json" \
              -d "{\"model\": \"$model\", \"max_tokens\": 1, \"messages\": [{\"role\": \"user\", \"content\": \"test\"}]}" \
              https://api.anthropic.com/v1/messages)

            if [ "$http_code" = "200" ]; then
              echo "‚úÖ Model $model is available (HTTP $http_code)"
              validated_models+=("\"$model\"")
            else
              echo "‚ùå Model $model failed validation (HTTP $http_code)"
            fi
          done

          # Format validated models as JSON array
          if [ ${#validated_models[@]} -eq 0 ]; then
            echo "‚ö†Ô∏è No models passed validation - will use fallback"
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            echo "validated_models=[]" >> $GITHUB_OUTPUT
          else
            validated_json="[$(IFS=,; echo "${validated_models[*]}")]"
            echo "‚úÖ Validated models: $validated_json"
            echo "validation_status=success" >> $GITHUB_OUTPUT
            echo "validated_models=$validated_json" >> $GITHUB_OUTPUT
          fi

      - name: Intelligent Model Selection
        id: model-selection
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            console.log('ü§ñ INTELLIGENT MODEL SELECTION');
            console.log('================================');

            const prNumber = ${{ github.event.pull_request.number || github.event.inputs.pr_number }};
            const forceSonnet = ${{ github.event.inputs.force_sonnet || false }};
            const validationStatus = '${{ steps.api-key-validation.outputs.validation_status }}';
            const validatedModelsJson = '${{ steps.api-key-validation.outputs.validated_models }}';

            console.log(`üîë API Validation Status: ${validationStatus}`);
            console.log(`‚úÖ Validated Models: ${validatedModelsJson}`);

            // Parse validated models
            let validatedModels = [];
            try {
              validatedModels = JSON.parse(validatedModelsJson || '[]');
            } catch (error) {
              console.log(`‚ö†Ô∏è Error parsing validated models: ${error.message}`);
              validatedModels = [];
            }

            // Force Sonnet if requested via workflow_dispatch (but only if validated)
            if (forceSonnet) {
              console.log('üîß MANUAL OVERRIDE: Force Sonnet requested');
              const sonnetModel = 'claude-3-5-sonnet-20240620';
              if (validationStatus === 'success' && validatedModels.includes(sonnetModel)) {
                core.setOutput('model', sonnetModel);
                core.setOutput('reason', 'Manual override via workflow_dispatch (validated)');
              } else {
                console.log('‚ö†Ô∏è Sonnet not validated, using fallback');
                core.setOutput('model', sonnetModel);
                core.setOutput('reason', 'Manual override via workflow_dispatch (fallback - validation failed)');
              }
              return;
            }

            // Handle validation failure - use fallback model
            if (validationStatus !== 'success' || validatedModels.length === 0) {
              console.log('‚ö†Ô∏è API validation failed or no models available');
              const fallbackModel = 'claude-3-5-sonnet-20240620';
              core.setOutput('model', fallbackModel);
              core.setOutput('reason', 'Fallback model - API validation failed');
              return;
            }

            try {
              // Get PR details including file changes
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const additions = pr.additions || 0;
              const deletions = pr.deletions || 0;
              const totalChanges = additions + deletions;

              console.log(`üìä PR Stats: +${additions} -${deletions} (${totalChanges} total changes)`);

              // Get list of changed files
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const changedFiles = files.map(file => file.filename);
              console.log(`üìÅ Changed files (${changedFiles.length}):`, changedFiles.slice(0, 10));

              // Critical file patterns that require Sonnet (more specific to avoid false positives)
              const criticalPatterns = [
                /\/security\//i, /\/auth\//i, /\/payment\//i, /\/admin\//i, /\/core\//i, /\/api\//i,
                /security\./i, /auth\./i, /payment\./i, /admin\./i, /core\./i, /api\./i,
                /login\./i, /user\./i, /permission\./i, /role\./i, /session\./i, /token\./i,
                /-security/i, /-auth/i, /-payment/i, /-admin/i, /-core/i, /-api/i,
                /crypto/i, /encrypt/i, /password/i, /oauth/i, /jwt/i, /sql/i,
                /database/i, /migration/i, /schema/i
              ];

              // Check for critical files
              const hasCriticalFiles = changedFiles.some(file =>
                criticalPatterns.some(pattern => pattern.test(file))
              );

              // Helper function to select best available model from validated models
              function selectValidatedModel(preferredModel, fallbackModel, reason) {
                if (validatedModels.includes(preferredModel)) {
                  return { model: preferredModel, reason: reason + ' (validated)' };
                } else if (validatedModels.includes(fallbackModel)) {
                  return { model: fallbackModel, reason: reason + ' (fallback - preferred model not validated)' };
                } else {
                  // Last resort - use first validated model
                  return {
                    model: validatedModels[0],
                    reason: reason + ' (using first validated model)'
                  };
                }
              }

              // Decision logic - only use validated models
              let model, reason;
              const sonnetModel = 'claude-3-5-sonnet-20240620';
              const haikuModel = 'claude-3-haiku-20240307';

              if (hasCriticalFiles) {
                const result = selectValidatedModel(sonnetModel, haikuModel, 'Critical security/auth/payment files detected');
                model = result.model;
                reason = result.reason;
                console.log('üî¥ CRITICAL FILES: ' + reason);
              } else if (totalChanges > 200) {
                const result = selectValidatedModel(sonnetModel, haikuModel, `Large changeset (${totalChanges} changes > 200 threshold)`);
                model = result.model;
                reason = result.reason;
                console.log('üî¥ LARGE CHANGESET: ' + reason);
              } else if (totalChanges > 100 && changedFiles.some(f => f.endsWith('.php'))) {
                const result = selectValidatedModel(sonnetModel, haikuModel, `Medium PHP changeset (${totalChanges} changes)`);
                model = result.model;
                reason = result.reason;
                console.log('üü° MEDIUM PHP CHANGES: ' + reason);
              } else {
                const result = selectValidatedModel(haikuModel, sonnetModel, `Simple changes (${totalChanges} changes, no critical files)`);
                model = result.model;
                reason = result.reason;
                console.log('üü¢ SIMPLE CHANGES: ' + reason);
              }

              console.log(`‚úÖ Model: ${model}`);
              console.log(`üìù Reason: ${reason}`);

              core.setOutput('model', model);
              core.setOutput('reason', reason);

            } catch (error) {
              console.error(`‚ùå ERROR in model selection: ${error.message}`);
              // Fallback to first validated model or default
              let fallbackModel, fallbackReason;
              if (validatedModels.length > 0) {
                fallbackModel = validatedModels[0];
                fallbackReason = 'Error in selection, using first validated model';
              } else {
                fallbackModel = 'claude-3-5-sonnet-20240620';
                fallbackReason = 'Error in selection, using default model (validation failed)';
              }
              core.setOutput('model', fallbackModel);
              core.setOutput('reason', fallbackReason);
            }

  claude-review:
    needs: [cost-optimization-check]
    # COST OPTIMIZATION: Skip if cached or conditions not met
    if: |
      needs.cost-optimization-check.outputs.should_run == 'true' &&
      needs.cost-optimization-check.outputs.cache_hit == 'false'

    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Cost Optimization Summary
        run: |
          echo "üí∞ CLAUDE AI COST-OPTIMIZED REVIEW STARTING"
          echo "============================================"
          echo "üìã PR NUMBER: ${{ needs.cost-optimization-check.outputs.pr_number }}"
          echo "ü§ñ SELECTED MODEL: ${{ needs.cost-optimization-check.outputs.model_selection }}"
          echo "üìù SELECTION REASON: ${{ needs.cost-optimization-check.outputs.model_reason }}"
          echo "üîë VALIDATION STATUS: ${{ needs.cost-optimization-check.outputs.validation_status }}"
          echo "‚úÖ VALIDATED MODELS: ${{ needs.cost-optimization-check.outputs.validated_models }}"
          echo "üíæ CACHE STATUS: ${{ needs.cost-optimization-check.outputs.cache_hit == 'true' && 'HIT (Skipped)' || 'MISS (Proceeding)' }}"
          echo "‚è∞ EXECUTION TIME: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "============================================"

      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Verify Authentication
        run: |
          echo "üîê AUTHENTICATION STATUS:"
          if [ -n "${{ steps.app_token.outputs.token }}" ]; then
            echo "‚úÖ GitHub App token generated successfully"
            echo "ü§ñ Using BlazeCommerce Automation Bot authentication"
          elif [ -n "${{ secrets.BOT_GITHUB_TOKEN }}" ]; then
            echo "‚ö†Ô∏è Using BOT_GITHUB_TOKEN fallback"
          else
            echo "‚ö†Ô∏è Using default github.token"
          fi
          echo "üìä Repository: ${{ github.repository }}"
          echo "üéØ Event: ${{ github.event_name }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          fetch-depth: 1

      - name: Validate Claude API Key
        id: validate-api-key
        run: |
          echo "üîç VALIDATING CLAUDE API CONFIGURATION"
          echo "====================================="
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "‚ùå ERROR: ANTHROPIC_API_KEY secret is not set!"
            echo ""
            echo "üîß TO FIX THIS:"
            echo "1. Go to repository Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: ANTHROPIC_API_KEY"
            echo "4. Value: Your Anthropic API key (starts with 'sk-ant-')"
            echo "5. Get your API key from: https://console.anthropic.com/"
            echo ""
            echo "üìã SELECTED MODEL: ${{ needs.cost-optimization-check.outputs.model_selection }}"
            echo "üìù SELECTION REASON: ${{ needs.cost-optimization-check.outputs.model_reason }}"
            exit 1
          else
            echo "‚úÖ ANTHROPIC_API_KEY is configured"
            echo "üìã SELECTED MODEL: ${{ needs.cost-optimization-check.outputs.model_selection }}"
            echo "üìù SELECTION REASON: ${{ needs.cost-optimization-check.outputs.model_reason }}"
            echo "üîë VALIDATION STATUS: ${{ needs.cost-optimization-check.outputs.validation_status }}"
            echo "‚úÖ VALIDATED MODELS: ${{ needs.cost-optimization-check.outputs.validated_models }}"
          fi

      - name: Post API Validation Warning
        if: needs.cost-optimization-check.outputs.validation_status == 'failed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = ${{ needs.cost-optimization-check.outputs.pr_number }};

            const message = `‚ö†Ô∏è **API Validation Warning**

            The Claude AI code review is proceeding with a fallback model because API validation failed for all models.

            **Possible causes:**
            - API key may be invalid or expired
            - API rate limits may have been reached
            - Anthropic API service may be experiencing issues

            **Selected Model:** \`${{ needs.cost-optimization-check.outputs.model_selection }}\`
            **Selection Reason:** ${{ needs.cost-optimization-check.outputs.model_reason }}

            The review will continue, but you may want to check your API key configuration.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: message
            });

      - name: Run Claude Code Review
        id: claude-review
        if: steps.validate-api-key.outcome == 'success'
        uses: anthropics/claude-code-action@v0.0.32
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}

          # COST OPTIMIZATION: Intelligent model selection
          model: ${{ needs.cost-optimization-check.outputs.model_selection }}

          # Add timeout to prevent hanging
          timeout_minutes: "8"

          # COST OPTIMIZATION: Concise prompt (reduced from 138 lines to ~20 lines)
          direct_prompt: |
            Review this WordPress/WooCommerce plugin PR focusing on critical issues:

            **üî¥ Critical (Must Fix):**
            - Security vulnerabilities (SQL injection, XSS, CSRF)
            - WordPress/WooCommerce API misuse
            - Breaking changes or compatibility issues
            - Performance bottlenecks

            **üü° Important (Should Fix):**
            - WordPress coding standards violations
            - Missing input sanitization/output escaping
            - Deprecated function usage
            - Missing error handling

            **üü¢ Suggestions (Nice to Have):**
            - Code organization improvements
            - Documentation updates
            - Performance optimizations

            **Required Final Format:**
            ### FINAL VERDICT
            **Status**: APPROVED | CONDITIONAL APPROVAL | BLOCKED
            **Merge Readiness**: READY TO MERGE | READY AFTER FIXES | NOT READY
            **Recommendation**: Brief explanation

            Focus on security, compatibility, and WordPress best practices. Be concise but thorough.

      - name: Handle Claude Review Failure
        if: failure() && steps.validate-api-key.outcome == 'success'
        run: |
          echo "‚ùå CLAUDE CODE REVIEW FAILED"
          echo "============================"
          echo ""
          echo "üîç TROUBLESHOOTING STEPS:"
          echo "1. Check if ANTHROPIC_API_KEY is valid and has sufficient credits"
          echo "2. Verify the model name is correct: ${{ needs.cost-optimization-check.outputs.model_selection }}"
          echo "3. Check Anthropic API status: https://status.anthropic.com/"
          echo "4. Review the action logs above for specific error messages"
          echo ""
          echo "üìã DEBUG INFO:"
          echo "Model: ${{ needs.cost-optimization-check.outputs.model_selection }}"
          echo "Reason: ${{ needs.cost-optimization-check.outputs.model_reason }}"
          echo "Action Version: v0.0.32"
          echo "Timeout: 8 minutes"
          echo ""
          echo "üí° If the issue persists, try manually triggering the workflow with 'Force Sonnet' option"

  # COST OPTIMIZATION: Show cache hit information
  cache-skip-notification:
    needs: [cost-optimization-check]
    if: needs.cost-optimization-check.outputs.cache_hit == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
      - name: Cache Hit Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = ${{ needs.cost-optimization-check.outputs.pr_number }};
            const cacheKey = '${{ needs.cost-optimization-check.outputs.cache_key }}';

            const message = `üí∞ **Cost Optimization: Review Skipped**

            This commit has already been reviewed by Claude AI. Skipping duplicate review to save costs.

            **Cache Key:** \`${cacheKey}\`
            **Reason:** Commit already reviewed
            **Cost Savings:** ~$0.50-$2.00 per skipped review

            If you need a fresh review, push a new commit or use the manual workflow dispatch with "Force Sonnet" option.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: message
            });
