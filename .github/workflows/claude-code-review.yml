name: "Priority 2: Claude AI Code Review (Cost Optimized)"

# COST OPTIMIZATION: Intelligent triggering with file filtering and conditional execution
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.php'
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
      - 'src/**'
      - 'includes/**'
      - 'lib/**'
      - 'assets/**'
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'tests/**'
      - 'test/**'
      - '**.txt'
      - 'README*'
      - 'CHANGELOG*'
      - '.gitignore'
      - 'package-lock.json'
      - 'composer.lock'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string
      force_sonnet:
        description: 'Force use of Claude Sonnet (bypass intelligent selection)'
        required: false
        type: boolean
        default: false

# COST OPTIMIZATION: Simplified concurrency control for cost-optimized workflow
concurrency:
  group: claude-review-pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true  # Cancel previous runs to save costs

jobs:
  # COST OPTIMIZATION: Intelligent model selection and conditional execution
  cost-optimization-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # CONDITIONAL EXECUTION: Only run for external contributors or labeled PRs
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' ||
      github.event.pull_request.author_association == 'CONTRIBUTOR' ||
      contains(github.event.pull_request.labels.*.name, 'needs-review') ||
      contains(github.event.pull_request.labels.*.name, 'external-review')
    outputs:
      should_run: ${{ steps.execution-check.outputs.should_run }}
      model_selection: ${{ steps.model-selection.outputs.model }}
      model_reason: ${{ steps.model-selection.outputs.reason }}
      pr_number: ${{ steps.execution-check.outputs.pr_number }}
      cache_key: ${{ steps.cache-check.outputs.cache_key }}
      cache_hit: ${{ steps.cache-check.outputs.cache_hit }}
    steps:
      - name: Check Execution Conditions
        id: execution-check
        run: |
          echo "üí∞ COST OPTIMIZATION: Checking execution conditions"
          echo "=================================================="
          echo "Event: ${{ github.event_name }}"
          echo "Author Association: ${{ github.event.pull_request.author_association }}"
          echo "Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

          PR_NUMBER="${{ github.event.pull_request.number || github.event.inputs.pr_number }}"
          echo "PR Number: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT

      - name: Check for Review Cache
        id: cache-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üí∞ COST OPTIMIZATION: Checking for review cache');

            const prNumber = ${{ github.event.pull_request.number || github.event.inputs.pr_number }};
            const sha = '${{ github.event.pull_request.head.sha }}';

            // Generate a cache key based on PR number and commit SHA
            const cacheKey = `claude-review-${prNumber}-${sha}`;
            console.log(`üìã Cache key: ${cacheKey}`);
            core.setOutput('cache_key', cacheKey);

            try {
              // Check if this commit has already been reviewed
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 30
              });

              // Look for Claude review comments that mention this specific commit
              const existingReview = comments.find(comment =>
                comment.body.includes('Claude AI PR Review Complete') &&
                comment.body.includes(sha.substring(0, 7))
              );

              if (existingReview) {
                console.log('‚úÖ CACHE HIT: Found existing Claude review for this commit');
                console.log(`üìÖ Review date: ${existingReview.created_at}`);
                console.log(`üîó Review URL: ${existingReview.html_url}`);
                core.setOutput('cache_hit', 'true');
              } else {
                console.log('‚ùå CACHE MISS: No existing review found for this commit');
                core.setOutput('cache_hit', 'false');
              }
            } catch (error) {
              console.error(`‚ùå ERROR checking cache: ${error.message}`);
              core.setOutput('cache_hit', 'false');
            }

      - name: Intelligent Model Selection
        id: model-selection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('ü§ñ INTELLIGENT MODEL SELECTION');
            console.log('================================');

            const prNumber = ${{ github.event.pull_request.number || github.event.inputs.pr_number }};
            const forceSonnet = ${{ github.event.inputs.force_sonnet || false }};

            // Force Sonnet if requested via workflow_dispatch
            if (forceSonnet) {
              console.log('üîß MANUAL OVERRIDE: Force Sonnet requested');
              core.setOutput('model', 'claude-3-5-sonnet-20241022');
              core.setOutput('reason', 'Manual override via workflow_dispatch');
              return;
            }

            try {
              // Get PR details including file changes
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const additions = pr.additions || 0;
              const deletions = pr.deletions || 0;
              const totalChanges = additions + deletions;

              console.log(`üìä PR Stats: +${additions} -${deletions} (${totalChanges} total changes)`);

              // Get list of changed files
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const changedFiles = files.map(file => file.filename);
              console.log(`üìÅ Changed files (${changedFiles.length}):`, changedFiles.slice(0, 10));

              // Critical file patterns that require Sonnet (more specific to avoid false positives)
              const criticalPatterns = [
                /\/security\//i, /\/auth\//i, /\/payment\//i, /\/admin\//i, /\/core\//i, /\/api\//i,
                /security\./i, /auth\./i, /payment\./i, /admin\./i, /core\./i, /api\./i,
                /login\./i, /user\./i, /permission\./i, /role\./i, /session\./i, /token\./i,
                /-security/i, /-auth/i, /-payment/i, /-admin/i, /-core/i, /-api/i,
                /crypto/i, /encrypt/i, /password/i, /oauth/i, /jwt/i, /sql/i,
                /database/i, /migration/i, /schema/i
              ];

              // Check for critical files
              const hasCriticalFiles = changedFiles.some(file =>
                criticalPatterns.some(pattern => pattern.test(file))
              );

              // Decision logic
              let model, reason;

              if (hasCriticalFiles) {
                model = 'claude-3-5-sonnet-20241022';
                reason = 'Critical security/auth/payment files detected';
                console.log('üî¥ SONNET SELECTED: Critical files found');
              } else if (totalChanges > 200) {
                model = 'claude-3-5-sonnet-20241022';
                reason = `Large changeset (${totalChanges} changes > 200 threshold)`;
                console.log('üî¥ SONNET SELECTED: Large changeset');
              } else if (totalChanges > 100 && changedFiles.some(f => f.endsWith('.php'))) {
                model = 'claude-3-5-sonnet-20241022';
                reason = `Medium PHP changeset (${totalChanges} changes)`;
                console.log('üü° SONNET SELECTED: Medium PHP changes');
              } else {
                model = 'claude-3-haiku-20240307';
                reason = `Simple changes (${totalChanges} changes, no critical files)`;
                console.log('üü¢ HAIKU SELECTED: Simple changes');
              }

              console.log(`‚úÖ Model: ${model}`);
              console.log(`üìù Reason: ${reason}`);

              core.setOutput('model', model);
              core.setOutput('reason', reason);

            } catch (error) {
              console.error(`‚ùå ERROR in model selection: ${error.message}`);
              // Fallback to Haiku for safety
              core.setOutput('model', 'claude-3-haiku-20240307');
              core.setOutput('reason', 'Error in selection, defaulting to Haiku');
            }

  claude-review:
    needs: [cost-optimization-check]
    # COST OPTIMIZATION: Skip if cached or conditions not met
    if: |
      needs.cost-optimization-check.outputs.should_run == 'true' &&
      needs.cost-optimization-check.outputs.cache_hit == 'false'

    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Cost Optimization Summary
        run: |
          echo "üí∞ CLAUDE AI COST-OPTIMIZED REVIEW STARTING"
          echo "============================================"
          echo "üìã PR NUMBER: ${{ needs.cost-optimization-check.outputs.pr_number }}"
          echo "ü§ñ SELECTED MODEL: ${{ needs.cost-optimization-check.outputs.model_selection }}"
          echo "üìù SELECTION REASON: ${{ needs.cost-optimization-check.outputs.model_reason }}"
          echo "üíæ CACHE STATUS: ${{ needs.cost-optimization-check.outputs.cache_hit == 'true' && 'HIT (Skipped)' || 'MISS (Proceeding)' }}"
          echo "‚è∞ EXECUTION TIME: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "============================================"

      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Verify Authentication
        run: |
          echo "üîê AUTHENTICATION STATUS:"
          if [ -n "${{ steps.app_token.outputs.token }}" ]; then
            echo "‚úÖ GitHub App token generated successfully"
            echo "ü§ñ Using BlazeCommerce Automation Bot authentication"
          elif [ -n "${{ secrets.BOT_GITHUB_TOKEN }}" ]; then
            echo "‚ö†Ô∏è Using BOT_GITHUB_TOKEN fallback"
          else
            echo "‚ö†Ô∏è Using default github.token"
          fi
          echo "üìä Repository: ${{ github.repository }}"
          echo "üéØ Event: ${{ github.event_name }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}

          # COST OPTIMIZATION: Intelligent model selection
          model: ${{ needs.cost-optimization-check.outputs.model_selection }}

          # COST OPTIMIZATION: Concise prompt (reduced from 138 lines to ~20 lines)
          direct_prompt: |
            Review this WordPress/WooCommerce plugin PR focusing on critical issues:

            **üî¥ Critical (Must Fix):**
            - Security vulnerabilities (SQL injection, XSS, CSRF)
            - WordPress/WooCommerce API misuse
            - Breaking changes or compatibility issues
            - Performance bottlenecks

            **üü° Important (Should Fix):**
            - WordPress coding standards violations
            - Missing input sanitization/output escaping
            - Deprecated function usage
            - Missing error handling

            **üü¢ Suggestions (Nice to Have):**
            - Code organization improvements
            - Documentation updates
            - Performance optimizations

            **Required Final Format:**
            ### FINAL VERDICT
            **Status**: APPROVED | CONDITIONAL APPROVAL | BLOCKED
            **Merge Readiness**: READY TO MERGE | READY AFTER FIXES | NOT READY
            **Recommendation**: Brief explanation

            Focus on security, compatibility, and WordPress best practices. Be concise but thorough.

  # COST OPTIMIZATION: Show cache hit information
  cache-skip-notification:
    needs: [cost-optimization-check]
    if: needs.cost-optimization-check.outputs.cache_hit == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Cache Hit Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.cost-optimization-check.outputs.pr_number }};
            const cacheKey = '${{ needs.cost-optimization-check.outputs.cache_key }}';

            const message = `üí∞ **Cost Optimization: Review Skipped**

            This commit has already been reviewed by Claude AI. Skipping duplicate review to save costs.

            **Cache Key:** \`${cacheKey}\`
            **Reason:** Commit already reviewed
            **Cost Savings:** ~$0.50-$2.00 per skipped review

            If you need a fresh review, push a new commit or use the manual workflow dispatch with "Force Sonnet" option.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: message
            });
