name: "Create Release"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        type: string

# Simplified concurrency management
concurrency:
  group: release-${{ github.repository }}
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release information
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi
          
          # Extract version from tag (remove 'v' prefix)
          VERSION=${TAG_NAME#v}
          
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Creating release for $TAG_NAME (version $VERSION)"

      - name: Generate release notes
        id: release-notes
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.release-info.outputs.tag-name }}
          VERSION: ${{ steps.release-info.outputs.version }}
        with:
          script: |
            const tagName = process.env.TAG_NAME;
            const version = process.env.VERSION;

            // Get commits since last tag
            let previousTag;
            try {
              const { data: tags } = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 2
              });
              
              previousTag = tags.find(tag => tag.name !== tagName)?.name || 'HEAD~10';
            } catch (error) {
              previousTag = 'HEAD~10';
            }
            
            // Get commits
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: tagName
            });
            
            // Generate release notes
            let releaseNotes = `# Release ${version}\n\n`;
            
            if (commits.commits.length > 0) {
              releaseNotes += "## Changes\n\n";
              commits.commits.forEach(commit => {
                const message = commit.commit.message.split('\n')[0];
                releaseNotes += `- ${message}\n`;
              });
            } else {
              releaseNotes += "## Changes\n\n- Initial release\n";
            }
            
            releaseNotes += `\n## Installation\n\n`;
            releaseNotes += `Download the plugin files and install via WordPress admin.\n\n`;
            releaseNotes += `**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...${tagName}`;
            
            core.setOutput('notes', releaseNotes);
            console.log('Release notes generated');

      - name: Build release assets
        run: |
          echo "üî® Building release assets..."
          
          # Create release directory
          mkdir -p release
          
          # Copy plugin files (exclude development files)
          rsync -av --exclude='.git*' \
                   --exclude='node_modules' \
                   --exclude='tests' \
                   --exclude='docs' \
                   --exclude='.github' \
                   --exclude='scripts' \
                   --exclude='*.md' \
                   . release/blazecommerce/
          
          # Create zip file
          cd release
          zip -r "blazecommerce-${{ steps.release-info.outputs.version }}.zip" blazecommerce/
          
          echo "‚úÖ Release assets built"

      - name: Create GitHub release
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.release-info.outputs.tag-name }}
          VERSION: ${{ steps.release-info.outputs.version }}
          RELEASE_NOTES: ${{ steps.release-notes.outputs.notes }}
        with:
          script: |
            const fs = require('fs');
            const tagName = process.env.TAG_NAME;
            const version = process.env.VERSION;
            const releaseNotes = process.env.RELEASE_NOTES;

            try {
              // Create release
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `BlazeCommerce ${version}`,
                body: releaseNotes,
                draft: false,
                prerelease: version.includes('beta') || version.includes('alpha')
              });
              
              console.log(`‚úÖ Release created: ${release.html_url}`);
              
              // Upload release asset
              const zipPath = `release/blazecommerce-${version}.zip`;
              if (fs.existsSync(zipPath)) {
                const zipContent = fs.readFileSync(zipPath);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: `blazecommerce-${version}.zip`,
                  data: zipContent
                });
                
                console.log('‚úÖ Release asset uploaded');
              }
              
            } catch (error) {
              console.error('Error creating release:', error);
              core.setFailed(`Failed to create release: ${error.message}`);
            }

  summary:
    needs: create-release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "üèÅ Release Summary"
          echo "================="
          echo "Job Result: ${{ needs.create-release.result }}"
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "‚úÖ Release created successfully"
          else
            echo "‚ùå Release creation failed"
          fi
