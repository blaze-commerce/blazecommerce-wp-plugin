name: 🔍 Priority 1: Claude Direct Approval

# ENHANCED: Comprehensive triggers to ensure Priority 1 always runs first
on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted, dismissed]  # Added for completeness

# Priority 1: HIGHEST PRIORITY - must run BEFORE all other workflows
# This workflow initializes the approval process and must complete successfully
# before Priority 2 (Claude AI Code Review) can execute
concurrency:
  group: priority-1-claude-direct-approval-pr-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
  cancel-in-progress: false  # Don't cancel to ensure approval initialization completion

jobs:
  claude-direct-approval:
    name: Direct Claude Approval Action
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # ENHANCED: Explicit outputs for downstream workflows
    outputs:
      approval_status: ${{ steps.approval-action.outputs.approval_status }}
      pr_number: ${{ steps.get-pr.outputs.pr_number }}
      execution_time: ${{ steps.log-sequence.outputs.execution_time }}

    permissions:
      contents: read
      pull-requests: write
      issues: write  # FIXED: Need write permission to create comments

    steps:
      - name: Debug Workflow Environment
        run: |
          echo "🔍 PRIORITY 1: WORKFLOW DEBUG INFORMATION"
          echo "=" | tr -d '\n' | head -c 60; echo
          echo "📋 EVENT NAME: ${{ github.event_name }}"
          echo "📋 ACTOR: ${{ github.actor }}"
          echo "📋 REPOSITORY: ${{ github.repository }}"
          echo "📋 REF: ${{ github.ref }}"
          echo "📋 SHA: ${{ github.sha }}"
          echo "📋 RUN ID: ${{ github.run_id }}"
          echo "📋 RUN NUMBER: ${{ github.run_number }}"
          echo "🔑 SECRETS CHECK:"
          echo "   - BOT_GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN != '' && 'Available' || 'Missing' }}"
          echo "   - GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN != '' && 'Available' || 'Missing' }}"
          echo "=" | tr -d '\n' | head -c 60; echo

      - name: Log Priority 1 Workflow Sequence
        id: log-sequence
        run: |
          echo "🔍 PRIORITY 1: CLAUDE DIRECT APPROVAL STARTING"
          echo "=" | tr -d '\n' | head -c 60; echo
          echo "🎯 WORKFLOW: Priority 1 - Direct Approval (RUNS FIRST)"
          echo "📋 EVENT: ${{ github.event_name }}"
          echo "🔗 NEXT: Priority 2 (Claude AI Code Review) will wait for this completion"
          echo "⏰ EXECUTION TIME: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=" | tr -d '\n' | head -c 60; echo
          echo "execution_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      - name: Get PR Number
        id: get-pr
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER=${{ github.event.number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
          else
            echo "❌ Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi

          echo "🎯 PR Number: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Validate Workflow Prerequisites
        run: |
          echo "🔍 VALIDATING WORKFLOW PREREQUISITES"
          echo "=" | tr -d '\n' | head -c 60; echo

          # Check if we have a valid PR number
          PR_NUMBER="${{ steps.get-pr.outputs.pr_number }}"
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "❌ ERROR: No valid PR number found"
            echo "📋 Event: ${{ github.event_name }}"
            echo "📋 PR Number from step: $PR_NUMBER"
            exit 1
          fi

          echo "✅ PR Number validated: $PR_NUMBER"
          echo "✅ Event type: ${{ github.event_name }}"
          echo "✅ Prerequisites check passed"
          echo "=" | tr -d '\n' | head -c 60; echo

      - name: Direct Claude Approval Check and Action
        id: approval-action
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.get-pr.outputs.pr_number }};

            console.log('🔍 PRIORITY 1: CLAUDE DIRECT APPROVAL STARTING');
            console.log('=' .repeat(60));
            console.log(`📋 PR NUMBER: ${prNumber}`);
            console.log(`🎯 WORKFLOW: Priority 1 - Direct Approval (runs first)`);
            console.log(`🔑 TOKEN: ${process.env.GITHUB_TOKEN ? 'Present' : 'Missing'}`);
            console.log(`🔑 TOKEN TYPE: ${process.env.GITHUB_TOKEN === '${{ secrets.BOT_GITHUB_TOKEN }}' ? 'BOT_GITHUB_TOKEN' : 'GITHUB_TOKEN'}`);
            console.log(`📋 REPOSITORY: ${context.repo.owner}/${context.repo.repo}`);
            console.log(`📋 EVENT: ${context.eventName}`);
            console.log('=' .repeat(60));

            // Validate inputs
            if (!prNumber || prNumber === 'null' || prNumber === null) {
              throw new Error(`Invalid PR number: ${prNumber}`);
            }

            if (!process.env.GITHUB_TOKEN) {
              throw new Error('No GitHub token available');
            }

            try {
              // Step 1: Get all comments for the PR with enhanced logging
              console.log('📥 STEP 1: Fetching all comments for PR #' + prNumber);
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 100
              });

              console.log(`📊 TOTAL COMMENTS FOUND: ${comments.data.length}`);
              if (comments.data.length === 0) {
                console.log('⚠️ NO COMMENTS FOUND - This may be a new PR without Claude review yet');
              }
              
              // Step 2: Find Claude's latest comment with "Status: APPROVED"
              let claudeApprovalFound = false;
              let latestClaudeComment = null;
              
              for (const comment of comments.data.reverse()) { // Start from latest
                console.log(`🔍 Checking comment by ${comment.user.login} (${comment.created_at})`);
                
                // Check if comment contains "Status: APPROVED"
                if (comment.body.includes('Status: APPROVED') || 
                    comment.body.includes('Status**: APPROVED') ||
                    comment.body.includes('**Status**: APPROVED')) {
                  
                  console.log('✅ FOUND APPROVED STATUS in comment!');
                  console.log(`📄 Comment preview: ${comment.body.substring(0, 200)}...`);
                  
                  claudeApprovalFound = true;
                  latestClaudeComment = comment;
                  break;
                }
              }
              
              if (!claudeApprovalFound) {
                console.log('❌ No Claude approval found - Status: APPROVED not detected in any comment');
                return;
              }
              
              console.log('🎉 Claude approval detected! Proceeding with auto-approval...');
              
              // Step 3: Check if @blazecommerce-claude-ai has already approved
              console.log('🔍 Checking for existing @blazecommerce-claude-ai approval...');
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const existingApproval = reviews.data.find(review => 
                review.user.login === 'blazecommerce-claude-ai' && 
                review.state === 'APPROVED'
              );
              
              if (existingApproval) {
                console.log('✅ @blazecommerce-claude-ai has already approved this PR');
                console.log(`📅 Approval date: ${existingApproval.submitted_at}`);
                return;
              }
              
              // Step 4: Create the approval review
              console.log('🚀 EXECUTING APPROVAL API CALL...');
              console.log(`📡 API Call: POST /repos/${context.repo.owner}/${context.repo.repo}/pulls/${prNumber}/reviews`);
              console.log('📋 Request body: { event: "APPROVE", body: "Auto-approved based on Claude AI review showing Status: APPROVED" }');
              
              const approvalResponse = await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'Auto-approved by Claude AI Approval Gate\n\nThis PR has been automatically approved based on Claude AI review showing Status: APPROVED.\n\nApproval triggered by workflow run: ' + context.runId
              });
              
              console.log('✅ SUCCESS: Approval review created!');
              console.log(`📋 Review ID: ${approvalResponse.data.id}`);
              console.log(`📋 Review State: ${approvalResponse.data.state}`);
              console.log(`📋 Review URL: ${approvalResponse.data.html_url}`);
              
              // Step 5: Add a comment to confirm the approval
              console.log('💬 Adding confirmation comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'Claude AI Auto-Approval Successful!\n\n@blazecommerce-claude-ai has automatically approved this PR based on Claude review showing Status: APPROVED.\n\nThis is an automated action by the Claude AI Approval Gate workflow.'
              });
              
              console.log('🎉 DIRECT APPROVAL PROCESS COMPLETED SUCCESSFULLY!');

              // Set success output for downstream workflows
              console.log('✅ PRIORITY 1 COMPLETION: Direct approval process completed');
              console.log('🔗 NEXT STEP: Priority 2 (Claude AI Code Review) can now execute');
              core.setOutput('approval_status', 'completed');

            } catch (error) {
              console.error('❌ ERROR in direct approval process:', error);
              console.error('📋 Error details:', {
                message: error.message,
                status: error.status,
                response: error.response?.data
              });

              // Set failure output for downstream workflows
              core.setOutput('approval_status', 'failed');

              // Add error comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: 'Claude AI Auto-Approval Failed\n\nThere was an error during the auto-approval process: ' + error.message + '\n\nCheck workflow logs for detailed error information.'
                });
              } catch (commentError) {
                console.error('❌ Failed to create error comment:', commentError.message);
              }

              throw error;
            }

      - name: Log Priority 1 Completion
        if: always()
        run: |
          echo "🔍 PRIORITY 1: WORKFLOW COMPLETION STATUS"
          echo "=" | tr -d '\n' | head -c 60; echo
          echo "📊 APPROVAL STATUS: ${{ steps.approval-action.outputs.approval_status }}"
          echo "📋 PR NUMBER: ${{ steps.get-pr.outputs.pr_number }}"
          echo "⏰ COMPLETED AT: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 DOWNSTREAM: Priority 2 workflows can now execute"
          echo "=" | tr -d '\n' | head -c 60; echo
