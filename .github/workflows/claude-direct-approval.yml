name: üîç Priority 1: Claude Direct Approval

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

# Priority 1: Highest priority - must run BEFORE Claude code review to initialize approval process
# Simplified dependencies to prevent race conditions
concurrency:
  group: priority-1-claude-direct-approval-pr-${{ github.event.pull_request.number || github.event.issue.number }}
  cancel-in-progress: false  # Don't cancel to ensure approval initialization completion

jobs:
  claude-direct-approval:
    name: Direct Claude Approval Action
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Get PR Number
        id: get-pr
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER=${{ github.event.number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            echo "‚ùå Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          
          echo "üéØ PR Number: $PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Direct Claude Approval Check and Action
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.get-pr.outputs.pr_number }};
            
            console.log('üîç PRIORITY 1: CLAUDE DIRECT APPROVAL STARTING');
            console.log('=' .repeat(60));
            console.log(`üìã PR NUMBER: ${prNumber}`);
            console.log(`üéØ WORKFLOW: Priority 1 - Direct Approval (runs first)`);
            console.log(`üîë TOKEN: ${process.env.GITHUB_TOKEN ? 'Present' : 'Missing'}`);
            console.log('=' .repeat(60));

            try {
              // Step 1: Get all comments for the PR with enhanced logging
              console.log('üì• STEP 1: Fetching all comments for PR #' + prNumber);
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 100
              });

              console.log(`üìä TOTAL COMMENTS FOUND: ${comments.data.length}`);
              if (comments.data.length === 0) {
                console.log('‚ö†Ô∏è NO COMMENTS FOUND - This may be a new PR without Claude review yet');
              }
              
              // Step 2: Find Claude's latest comment with "Status: APPROVED"
              let claudeApprovalFound = false;
              let latestClaudeComment = null;
              
              for (const comment of comments.data.reverse()) { // Start from latest
                console.log(`üîç Checking comment by ${comment.user.login} (${comment.created_at})`);
                
                // Check if comment contains "Status: APPROVED"
                if (comment.body.includes('Status: APPROVED') || 
                    comment.body.includes('Status**: APPROVED') ||
                    comment.body.includes('**Status**: APPROVED')) {
                  
                  console.log('‚úÖ FOUND APPROVED STATUS in comment!');
                  console.log(`üìÑ Comment preview: ${comment.body.substring(0, 200)}...`);
                  
                  claudeApprovalFound = true;
                  latestClaudeComment = comment;
                  break;
                }
              }
              
              if (!claudeApprovalFound) {
                console.log('‚ùå No Claude approval found - Status: APPROVED not detected in any comment');
                return;
              }
              
              console.log('üéâ Claude approval detected! Proceeding with auto-approval...');
              
              // Step 3: Check if @blazecommerce-claude-ai has already approved
              console.log('üîç Checking for existing @blazecommerce-claude-ai approval...');
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const existingApproval = reviews.data.find(review => 
                review.user.login === 'blazecommerce-claude-ai' && 
                review.state === 'APPROVED'
              );
              
              if (existingApproval) {
                console.log('‚úÖ @blazecommerce-claude-ai has already approved this PR');
                console.log(`üìÖ Approval date: ${existingApproval.submitted_at}`);
                return;
              }
              
              // Step 4: Create the approval review
              console.log('üöÄ EXECUTING APPROVAL API CALL...');
              console.log(`üì° API Call: POST /repos/${context.repo.owner}/${context.repo.repo}/pulls/${prNumber}/reviews`);
              console.log('üìã Request body: { event: "APPROVE", body: "Auto-approved based on Claude AI review showing Status: APPROVED" }');
              
              const approvalResponse = await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'Auto-approved by Claude AI Approval Gate\n\nThis PR has been automatically approved based on Claude AI review showing Status: APPROVED.\n\nApproval triggered by workflow run: ' + context.runId
              });
              
              console.log('‚úÖ SUCCESS: Approval review created!');
              console.log(`üìã Review ID: ${approvalResponse.data.id}`);
              console.log(`üìã Review State: ${approvalResponse.data.state}`);
              console.log(`üìã Review URL: ${approvalResponse.data.html_url}`);
              
              // Step 5: Add a comment to confirm the approval
              console.log('üí¨ Adding confirmation comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'Claude AI Auto-Approval Successful!\n\n@blazecommerce-claude-ai has automatically approved this PR based on Claude review showing Status: APPROVED.\n\nThis is an automated action by the Claude AI Approval Gate workflow.'
              });
              
              console.log('üéâ DIRECT APPROVAL PROCESS COMPLETED SUCCESSFULLY!');
              
            } catch (error) {
              console.error('‚ùå ERROR in direct approval process:', error);
              console.error('üìã Error details:', {
                message: error.message,
                status: error.status,
                response: error.response?.data
              });
              
              // Add error comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: 'Claude AI Auto-Approval Failed\n\nThere was an error during the auto-approval process: ' + error.message + '\n\nCheck workflow logs for detailed error information.'
                });
              } catch (commentError) {
                console.error('‚ùå Failed to create error comment:', commentError.message);
              }
              
              throw error;
            }
