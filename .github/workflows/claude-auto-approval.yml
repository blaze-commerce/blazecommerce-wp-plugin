name: "✅ BlazeCommerce Automation Bot - Auto-Approval"

on:
  workflow_run:
    workflows: ["🤖 Priority 2: Claude AI Code Review"]
    types: [completed]
  # FIX: Removed issue_comment trigger to prevent race conditions and endless loops
  # The workflow_run trigger is sufficient for automated approval after code review
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to evaluate'
        required: true
        type: string

jobs:
  claude-auto-approval:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      # Required permissions for GitHub App authentication and PR approval
      contents: read           # Read repository content
      pull-requests: write     # Create approval reviews
      actions: read           # Read workflow run information
    steps:
      - name: Generate GitHub App Token
        id: app_token
        if: secrets.BC_GITHUB_APP_ID && secrets.BC_GITHUB_APP_PRIVATE_KEY
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
      - name: Determine PR Number and Trigger
        id: get-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            let prNumber = null;
            let shouldRun = false;

            console.log('🔍 BLAZECOMMERCE AUTOMATION BOT - AUTO-APPROVAL WORKFLOW');
            console.log('=' .repeat(60));
            console.log('Event: ' + context.eventName);
            console.log('🔐 Authentication: Using GitHub App or BOT_GITHUB_TOKEN fallback');

            // Verify authentication
            try {
              const { data: user } = await github.rest.users.getAuthenticated();
              console.log(`✅ Authenticated as: ${user.login} (${user.type})`);
              if (user.type === 'Bot') {
                console.log('🤖 Using GitHub App authentication');
              } else {
                console.log('🔑 Using personal access token authentication');
              }
            } catch (authError) {
              console.error(`❌ Authentication error: ${authError.message}`);
            }
            
            if (context.eventName === 'workflow_run') {
              console.log('WORKFLOW_RUN trigger detected');
              if (context.payload.workflow_run.pull_requests && context.payload.workflow_run.pull_requests.length > 0) {
                prNumber = context.payload.workflow_run.pull_requests[0].number;
                shouldRun = true;
                console.log('Found PR from workflow_run: ' + prNumber);
              }
            } else if (context.eventName === 'issue_comment') {
              console.log('ISSUE_COMMENT trigger detected');
              const comment = context.payload.comment;
              if (comment && comment.body) {
                const isClaudeBot = comment.user.login === 'claude[bot]' || 
                                   comment.user.login.includes('claude') ||
                                   comment.user.login === 'blazecommerce-claude-ai';
                const hasFinalVerdict = comment.body.includes('FINAL VERDICT');
                const isPR = context.payload.issue && context.payload.issue.pull_request;
                
                console.log('User: ' + comment.user.login);
                console.log('Is Claude bot: ' + isClaudeBot);
                console.log('Has FINAL VERDICT: ' + hasFinalVerdict);
                console.log('Is PR: ' + isPR);
                
                if (isClaudeBot && hasFinalVerdict && isPR) {
                  prNumber = context.payload.issue.number;
                  shouldRun = true;
                  console.log('Found Claude FINAL VERDICT in PR: ' + prNumber);
                }
              }
            } else if (context.eventName === 'workflow_dispatch') {
              console.log('WORKFLOW_DISPATCH trigger detected');
              prNumber = parseInt(context.payload.inputs.pr_number);
              shouldRun = true;
              console.log('Manual trigger for PR: ' + prNumber);
            }
            
            console.log('Final result - PR: ' + prNumber + ', Should run: ' + shouldRun);
            core.setOutput('pr_number', prNumber ? prNumber.toString() : '');
            core.setOutput('should_run', shouldRun.toString());

      - name: Evaluate Claude AI Approval
        if: steps.get-pr.outputs.should_run == 'true'
        id: evaluate
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('Evaluating Claude approval for PR #' + prNumber);
            
            // Get comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber)
            });
            
            // Look for Claude's final verdict (most recent first)
            let claudeApproval = null;
            for (const comment of comments.reverse()) {
              const isClaudeBot = comment.user.login === 'claude[bot]' || 
                                 comment.user.login.includes('claude') ||
                                 comment.user.login === 'blazecommerce-claude-ai';
              
              if (isClaudeBot && (comment.body.includes('FINAL VERDICT') || comment.body.includes('### FINAL VERDICT'))) {
                console.log('Found Claude FINAL VERDICT comment from: ' + comment.user.login);
                console.log('Comment created at: ' + comment.created_at);

                // Safe excerpt extraction
                const verdictIndex = comment.body.indexOf('FINAL VERDICT');
                if (verdictIndex !== -1) {
                  console.log('Comment excerpt: ' + comment.body.substring(verdictIndex, verdictIndex + 200));
                } else {
                  console.log('Comment excerpt: ' + comment.body.substring(0, 200) + '...');
                }

                // Check for status with flexible formatting (handles markdown bold)
                if (comment.body.includes('Status**: APPROVED') || comment.body.includes('Status: APPROVED')) {
                  claudeApproval = 'APPROVED';
                  console.log('Claude status: APPROVED');
                } else if (comment.body.includes('Status**: BLOCKED') || comment.body.includes('Status: BLOCKED')) {
                  claudeApproval = 'BLOCKED';
                  console.log('Claude status: BLOCKED');
                } else if (comment.body.includes('Status**: CONDITIONAL') || comment.body.includes('Status: CONDITIONAL')) {
                  claudeApproval = 'CONDITIONAL';
                  console.log('Claude status: CONDITIONAL');
                }
                break;
              }
            }
            
            if (claudeApproval === 'APPROVED') {
              console.log('✅ Auto-approving PR #' + prNumber + ' based on Claude AI approval');
              console.log('🔐 Authentication: Using BlazeCommerce Automation Bot');
              console.log('📋 Repository: ' + context.repo.owner + '/' + context.repo.repo);
              console.log('🎯 PR Number: ' + prNumber);

              try {
                // FIX: Check for existing bot approvals BEFORE creating new ones to prevent duplicates
                console.log('🔍 Checking for existing bot approvals...');

                const { data: existingReviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                const existingBotApproval = existingReviews.find(review =>
                  (review.user.login === 'blazecommerce-claude-ai' ||
                   (review.user.type === 'Bot' && review.user.login.includes('blazecommerce-automation'))) &&
                  review.state === 'APPROVED'
                );

                if (existingBotApproval) {
                  console.log('✅ Bot approval already exists - skipping duplicate');
                  console.log('📊 Existing Review ID: ' + existingBotApproval.id);
                  console.log('📅 Existing Review Created: ' + existingBotApproval.submitted_at);
                  console.log('🔗 Existing Review URL: ' + existingBotApproval.html_url);

                  core.setOutput('result', 'ALREADY_APPROVED');
                  core.setOutput('review_id', existingBotApproval.id);
                  core.setOutput('review_url', existingBotApproval.html_url);
                  return;
                }

                // Auto-approve the PR with comprehensive error handling
                console.log('🚀 Attempting to create approval review...');

                const approvalResult = await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber),
                  event: 'APPROVE',
                  body: '✅ **Auto-approved by BlazeCommerce Automation Bot**\n\nClaude AI has reviewed this PR and provided approval. This automated approval is based on Claude\'s comprehensive security and code quality analysis.\n\n**Status:** APPROVED by Claude AI\n**Automation:** BlazeCommerce Automation Bot\n**Trigger:** ' + context.eventName + '\n**Timestamp:** ' + new Date().toISOString()
                });

                console.log('✅ Successfully created approval review!');
                console.log('📊 Review ID: ' + approvalResult.data.id);
                console.log('👤 Review User: ' + approvalResult.data.user.login);
                console.log('📅 Review Created: ' + approvalResult.data.submitted_at);
                console.log('🔗 Review URL: ' + approvalResult.data.html_url);

                // Verify the approval was created
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                const botApproval = reviews.find(review =>
                  (review.user.login === 'blazecommerce-claude-ai' ||
                   (review.user.type === 'Bot' && review.user.login.includes('blazecommerce-automation'))) &&
                  review.state === 'APPROVED'
                );

                if (botApproval) {
                  console.log('✅ VERIFICATION SUCCESS: Bot approval confirmed in PR reviews');
                  console.log('👤 Approver: ' + botApproval.user.login);
                  console.log('📊 Review State: ' + botApproval.state);
                } else {
                  console.log('⚠️ WARNING: Bot approval not found in PR reviews - may need manual verification');
                }

                core.setOutput('result', 'APPROVED');
                core.setOutput('review_id', approvalResult.data.id);
                core.setOutput('review_url', approvalResult.data.html_url);

              } catch (error) {
                console.error('❌ CRITICAL ERROR: Failed to create approval review');
                console.error('🔍 Error Type: ' + error.constructor.name);
                console.error('📝 Error Message: ' + error.message);
                console.error('📊 Error Status: ' + (error.status || 'unknown'));

                if (error.response) {
                  console.error('🌐 Response Status: ' + error.response.status);
                  console.error('📄 Response Data: ' + JSON.stringify(error.response.data, null, 2));
                }

                // Check token permissions
                try {
                  const { data: user } = await github.rest.users.getAuthenticated();
                  console.log('🔐 Token User: ' + user.login);
                  console.log('👤 User Type: ' + user.type);
                } catch (authError) {
                  console.error('❌ Authentication Error: ' + authError.message);
                }

                // Check repository permissions
                try {
                  const { data: repo } = await github.rest.repos.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                  console.log('📊 Repository Permissions Available: ' + JSON.stringify(repo.permissions, null, 2));
                } catch (repoError) {
                  console.error('❌ Repository Access Error: ' + repoError.message);
                }

                core.setOutput('result', 'ERROR');
                core.setOutput('error_message', error.message);
                throw error; // Re-throw to fail the workflow
              }
            } else if (claudeApproval === 'BLOCKED') {
              console.log('❌ PR #' + prNumber + ' blocked by Claude AI - manual review required');
              core.setOutput('result', 'BLOCKED');
            } else {
              console.log('⏳ PR #' + prNumber + ' - no clear Claude approval found, manual review required');
              core.setOutput('result', 'PENDING');
            }
