name: "‚úÖ Claude AI Auto-Approval"

on:
  workflow_run:
    workflows: ["ü§ñ Priority 2: Claude AI Code Review"]
    types: [completed]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to evaluate'
        required: true
        type: string

jobs:
  claude-auto-approval:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Determine PR Number and Trigger
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç CLAUDE AUTO-APPROVAL WORKFLOW DEBUG');
            console.log('=' .repeat(60));
            console.log(`üìã EVENT NAME: ${context.eventName}`);
            console.log(`‚è∞ TIMESTAMP: ${new Date().toISOString()}`);
            console.log(`üéØ WORKFLOW: Claude AI Auto-Approval`);
            console.log('=' .repeat(60));

            let prNumber = null;
            let shouldRun = false;

            if (context.eventName === 'workflow_run') {
              console.log('üì• TRIGGERED BY: workflow_run event');
              console.log(`üìä WORKFLOW NAME: ${context.payload.workflow_run.name}`);
              console.log(`üìä WORKFLOW STATUS: ${context.payload.workflow_run.status}`);
              console.log(`üìä WORKFLOW CONCLUSION: ${context.payload.workflow_run.conclusion}`);
              console.log(`üìä WORKFLOW ID: ${context.payload.workflow_run.id}`);

              if (context.payload.workflow_run.pull_requests && context.payload.workflow_run.pull_requests.length > 0) {
                prNumber = context.payload.workflow_run.pull_requests[0].number;
                shouldRun = true;
                console.log(`‚úÖ FOUND PR: #${prNumber} from workflow_run`);
                console.log(`üìã PR HEAD SHA: ${context.payload.workflow_run.pull_requests[0].head.sha}`);
              } else {
                console.log('‚ùå NO PR FOUND: workflow_run.pull_requests is empty or missing');
                console.log('üìä PAYLOAD STRUCTURE:', JSON.stringify(context.payload.workflow_run, null, 2));
              }
            } else if (context.eventName === 'issue_comment') {
              console.log('üì• TRIGGERED BY: issue_comment event');
              const comment = context.payload.comment;
              if (comment && comment.body) {
                console.log(`üë§ COMMENT USER: ${comment.user.login}`);
                console.log(`üÜî COMMENT ID: ${comment.id}`);
                console.log(`‚è∞ COMMENT CREATED: ${comment.created_at}`);
                console.log(`üìù COMMENT LENGTH: ${comment.body.length} characters`);

                const isClaudeBot = comment.user.login === 'claude[bot]' ||
                                   comment.user.login.includes('claude') ||
                                   comment.user.login === 'blazecommerce-claude-ai';
                const hasFinalVerdict = comment.body.includes('FINAL VERDICT');
                const isPR = context.payload.issue && context.payload.issue.pull_request;

                console.log(`ü§ñ IS CLAUDE BOT: ${isClaudeBot}`);
                console.log(`‚öñÔ∏è HAS FINAL VERDICT: ${hasFinalVerdict}`);
                console.log(`üìã IS PR: ${isPR}`);

                // Debug: Show comment excerpt around FINAL VERDICT
                if (hasFinalVerdict) {
                  const verdictIndex = comment.body.indexOf('FINAL VERDICT');
                  const excerpt = comment.body.substring(Math.max(0, verdictIndex - 50), verdictIndex + 300);
                  console.log(`üìÑ VERDICT EXCERPT: ${excerpt}`);
                }
                console.log('Is PR: ' + isPR);
                
                if (isClaudeBot && hasFinalVerdict && isPR) {
                  prNumber = context.payload.issue.number;
                  shouldRun = true;
                  console.log('Found Claude FINAL VERDICT in PR: ' + prNumber);
                }
              }
            } else if (context.eventName === 'workflow_dispatch') {
              console.log('WORKFLOW_DISPATCH trigger detected');
              prNumber = parseInt(context.payload.inputs.pr_number);
              shouldRun = true;
              console.log('Manual trigger for PR: ' + prNumber);
            }
            
            console.log('Final result - PR: ' + prNumber + ', Should run: ' + shouldRun);
            core.setOutput('pr_number', prNumber ? prNumber.toString() : '');
            core.setOutput('should_run', shouldRun.toString());

      - name: Evaluate Claude AI Approval
        if: steps.get-pr.outputs.should_run == 'true'
        id: evaluate
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('Evaluating Claude approval for PR #' + prNumber);
            
            // Get comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber)
            });
            
            // Look for Claude's final verdict (most recent first)
            let claudeApproval = null;
            for (const comment of comments.reverse()) {
              const isClaudeBot = comment.user.login === 'claude[bot]' || 
                                 comment.user.login.includes('claude') ||
                                 comment.user.login === 'blazecommerce-claude-ai';
              
              if (isClaudeBot && (comment.body.includes('FINAL VERDICT') || comment.body.includes('### FINAL VERDICT'))) {
                console.log('Found Claude FINAL VERDICT comment from: ' + comment.user.login);
                console.log('Comment created at: ' + comment.created_at);

                // Safe excerpt extraction
                const verdictIndex = comment.body.indexOf('FINAL VERDICT');
                if (verdictIndex !== -1) {
                  console.log('Comment excerpt: ' + comment.body.substring(verdictIndex, verdictIndex + 200));
                } else {
                  console.log('Comment excerpt: ' + comment.body.substring(0, 200) + '...');
                }

                // Enhanced status detection with multiple formats
                console.log('üîç TESTING STATUS FORMATS:');

                // Test all possible status formats
                const statusFormats = [
                  'Status**: APPROVED',
                  'Status: APPROVED',
                  '**Status**: APPROVED',
                  'Status**: [APPROVED]',
                  'Status: [APPROVED]',
                  '**Status**: [APPROVED]',
                  'Status**: CONDITIONAL APPROVAL',
                  'Status: CONDITIONAL APPROVAL',
                  '**Status**: CONDITIONAL APPROVAL',
                  'Status**: BLOCKED',
                  'Status: BLOCKED',
                  '**Status**: BLOCKED'
                ];

                let foundStatus = null;
                for (const format of statusFormats) {
                  if (comment.body.includes(format)) {
                    foundStatus = format;
                    console.log(`‚úÖ FOUND STATUS FORMAT: "${format}"`);
                    break;
                  }
                }

                if (!foundStatus) {
                  console.log('‚ùå NO MATCHING STATUS FORMAT FOUND');
                  console.log('üìÑ SEARCHING IN COMMENT BODY FOR STATUS PATTERNS...');

                  // More flexible regex search
                  const statusRegex = /\*?\*?Status\*?\*?:?\s*\[?(APPROVED|BLOCKED|CONDITIONAL\s*APPROVAL?)\]?/gi;
                  const matches = comment.body.match(statusRegex);
                  if (matches) {
                    console.log(`üîç REGEX MATCHES FOUND: ${JSON.stringify(matches)}`);
                  }
                }

                // Determine approval status
                if (comment.body.includes('Status**: APPROVED') || comment.body.includes('Status: APPROVED') ||
                    comment.body.includes('**Status**: APPROVED') || comment.body.includes('Status**: [APPROVED]') ||
                    comment.body.includes('Status: [APPROVED]') || comment.body.includes('**Status**: [APPROVED]')) {
                  claudeApproval = 'APPROVED';
                  console.log('‚úÖ CLAUDE STATUS: APPROVED');
                } else if (comment.body.includes('Status**: CONDITIONAL') || comment.body.includes('Status: CONDITIONAL') ||
                          comment.body.includes('**Status**: CONDITIONAL') || comment.body.includes('CONDITIONAL APPROVAL')) {
                  claudeApproval = 'CONDITIONAL';
                  console.log('‚ö†Ô∏è CLAUDE STATUS: CONDITIONAL');
                } else if (comment.body.includes('Status**: BLOCKED') || comment.body.includes('Status: BLOCKED') ||
                          comment.body.includes('**Status**: BLOCKED')) {
                  claudeApproval = 'BLOCKED';
                  console.log('‚ùå CLAUDE STATUS: BLOCKED');
                } else {
                  console.log('‚ùì CLAUDE STATUS: UNKNOWN/NOT FOUND');
                }
                break;
              }
            }
            
            if (claudeApproval === 'APPROVED') {
              console.log('‚úÖ Auto-approving PR #' + prNumber + ' based on Claude AI approval');
              
              // Auto-approve the PR
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber),
                event: 'APPROVE',
                body: '‚úÖ **Auto-approved by Claude AI**\n\nClaude AI has reviewed this PR and provided approval. This automated approval is based on Claude\'s comprehensive security and code quality analysis.\n\n**Status:** APPROVED by Claude AI\n**Trigger:** ' + context.eventName
              });
              
              console.log('‚úÖ Successfully auto-approved PR #' + prNumber);
              core.setOutput('result', 'APPROVED');
            } else if (claudeApproval === 'BLOCKED') {
              console.log('‚ùå PR #' + prNumber + ' blocked by Claude AI - manual review required');
              core.setOutput('result', 'BLOCKED');
            } else {
              console.log('‚è≥ PR #' + prNumber + ' - no clear Claude approval found, manual review required');
              core.setOutput('result', 'PENDING');
            }
