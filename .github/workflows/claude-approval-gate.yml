name: "Priority 3: Claude AI Approval Gate"

# CRITICAL FIX: Enhanced workflow to prevent premature auto-approval
# This workflow now ensures Claude AI has reviewed the LATEST commit before approving
# Fixes issue where auto-approval was based on stale reviews from previous commits

# RACE CONDITION FIX: Trigger on Claude comment posting, not workflow completion
# This ensures auto-approval only happens AFTER Claude posts the review comment
on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to evaluate'
        required: true
        type: string

# Priority 3: Claude AI Approval Gate - runs after Priority 2 completes
concurrency:
  group: priority-3-claude-approval-pr-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
  cancel-in-progress: false  # Don't cancel to ensure approval gate completion

jobs:
  # ENHANCED DEBUGGING: Pre-flight check to debug conditional logic issues
  debug-conditional-logic:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    # Always run this debug job to capture conditional evaluation details
    if: github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Debug Conditional Logic Evaluation
        env:
          # SECURITY FIX: Use environment variables to safely handle HTML content and special characters
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
          COMMENT_USER_TYPE: ${{ github.event.comment.user.type }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENT_CREATED: ${{ github.event.comment.created_at }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          IS_PULL_REQUEST: ${{ !!github.event.issue.pull_request }}
        run: |
          echo "üîç CONDITIONAL LOGIC DEBUG - Claude Approval Gate Workflow"
          echo "=================================================="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""

          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "üìù ISSUE COMMENT EVENT DETAILS:"
            echo "  Comment ID: ${COMMENT_ID}"
            echo "  Comment User: ${COMMENT_USER}"
            echo "  Comment User Type: ${COMMENT_USER_TYPE}"
            echo "  Comment Created: ${COMMENT_CREATED}"
            echo "  Issue/PR Number: ${ISSUE_NUMBER}"
            echo "  Is Pull Request: ${IS_PULL_REQUEST}"
            echo ""

            echo "üîç CONDITIONAL CHECKS:"
            echo "  Contains 'FINAL VERDICT': ${{ contains(github.event.comment.body, 'FINAL VERDICT') }}"
            echo "  Contains 'Claude AI PR Review Complete': ${{ contains(github.event.comment.body, 'Claude AI PR Review Complete') }}"
            echo "  User login exact match: ${{ github.event.comment.user.login == 'blazecommerce-automation-bot[bot]' }}"
            echo "  User login contains match: ${{ contains(github.event.comment.user.login, 'blazecommerce-automation-bot') }}"
            echo "  User type is Bot: ${{ github.event.comment.user.type == 'Bot' }}"
            echo ""

            echo "üìÑ COMMENT BODY PREVIEW (first 300 chars):"
            # SECURITY FIX: Use environment variable to safely handle HTML content and special characters
            # This prevents shell interpretation of CSS properties like 'margin-left:' as commands
            printf '%s\n' "${COMMENT_BODY}" | head -c 300
            echo ""
            echo "..."
            echo ""

            echo "‚úÖ ENHANCED CONDITIONAL EVALUATION:"
            # Enhanced bot detection logic using environment variables
            if [[ "${COMMENT_USER}" == "blazecommerce-automation-bot[bot]" ]] || \
               [[ "${COMMENT_USER}" == *"blazecommerce-automation-bot"* ]] || \
               [[ "${COMMENT_USER_TYPE}" == "Bot" && "${COMMENT_USER}" == *"blazecommerce"* ]]; then
              echo "  ‚úÖ Bot user detection: PASSED"
            else
              echo "  ‚ùå Bot user detection: FAILED"
            fi

            if [[ "${{ contains(github.event.comment.body, 'FINAL VERDICT') }}" == "true" ]] && \
               [[ "${{ contains(github.event.comment.body, 'Claude AI PR Review Complete') }}" == "true" ]]; then
              echo "  ‚úÖ Comment content check: PASSED"
            else
              echo "  ‚ùå Comment content check: FAILED"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üîß WORKFLOW DISPATCH EVENT:"
            echo "  Manual trigger detected"
            echo "  PR Number: ${{ github.event.inputs.pr_number }}"
          fi

          echo "=================================================="

  claude-approval-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # CRITICAL FIX: Simplified conditional logic to match working debug job pattern
    # ISSUE: Complex multi-line YAML condition was causing job skips despite valid triggers
    # SOLUTION: Use simple condition like debug job, move detailed checks to job steps
    if: github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch'
    permissions:
      # Required permissions for GitHub App authentication and PR approval
      contents: read           # Read repository content
      pull-requests: write     # Create approval reviews
      actions: read           # Read workflow run information
    steps:
      - name: Validate Claude Comment Trigger
        id: validate-trigger
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
          COMMENT_USER_TYPE: ${{ github.event.comment.user.type }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "üîç VALIDATING CLAUDE COMMENT TRIGGER"
          echo "=================================================="
          echo "Event: ${EVENT_NAME}"
          echo "Comment User: ${COMMENT_USER}"
          echo "Comment User Type: ${COMMENT_USER_TYPE}"
          echo ""

          # Skip validation for manual workflow_dispatch triggers
          if [ "${EVENT_NAME}" = "workflow_dispatch" ]; then
            echo "‚úÖ Manual workflow_dispatch trigger - validation skipped"
            echo "trigger_valid=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Validate issue_comment triggers
          if [ "${EVENT_NAME}" = "issue_comment" ]; then
            echo "üîç Validating issue_comment trigger..."

            # Check if comment contains FINAL VERDICT
            if echo "${COMMENT_BODY}" | grep -q "FINAL VERDICT"; then
              echo "‚úÖ Comment contains 'FINAL VERDICT'"
            else
              echo "‚ùå Comment does not contain 'FINAL VERDICT'"
              echo "trigger_valid=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Check if comment contains Claude AI PR Review Complete
            if echo "${COMMENT_BODY}" | grep -q "Claude AI PR Review Complete"; then
              echo "‚úÖ Comment contains 'Claude AI PR Review Complete'"
            else
              echo "‚ùå Comment does not contain 'Claude AI PR Review Complete'"
              echo "trigger_valid=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Check if user is Claude automation bot
            if [ "${COMMENT_USER}" = "blazecommerce-automation-bot[bot]" ] || \
               echo "${COMMENT_USER}" | grep -q "blazecommerce-automation-bot" || \
               ([ "${COMMENT_USER_TYPE}" = "Bot" ] && echo "${COMMENT_USER}" | grep -q "blazecommerce"); then
              echo "‚úÖ Comment from valid Claude automation bot: ${COMMENT_USER}"
            else
              echo "‚ùå Comment not from Claude automation bot: ${COMMENT_USER}"
              echo "trigger_valid=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "‚úÖ All validation checks passed - proceeding with approval gate"
            echo "trigger_valid=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Unexpected event type: ${EVENT_NAME}"
            echo "trigger_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Generate GitHub App Token
        id: app_token
        if: steps.validate-trigger.outputs.trigger_valid == 'true' && env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Determine PR Number and Trigger
        id: get-pr
        if: steps.validate-trigger.outputs.trigger_valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            console.log('üö® CRITICAL DEBUG: AUTO-APPROVAL WORKFLOW TRIGGERED');
            console.log(`üìã EVENT TYPE: ${context.eventName}`);
            console.log(`üìÖ TIMESTAMP: ${new Date().toISOString()}`);
            console.log('üéØ EXPECTED: issue_comment (with FINAL VERDICT from Claude)');

            // ENHANCED: Log the triggering event details for debugging
            if (context.eventName === 'issue_comment') {
              console.log('üîç ISSUE_COMMENT EVENT DETAILS:');
              console.log(`   Comment User: ${context.payload.comment?.user?.login || 'UNKNOWN'}`);
              console.log(`   Comment Body Preview: ${(context.payload.comment?.body || '').substring(0, 200)}...`);
              console.log(`   Contains FINAL VERDICT: ${(context.payload.comment?.body || '').includes('FINAL VERDICT')}`);
              console.log(`   Contains Claude Review: ${(context.payload.comment?.body || '').includes('Claude AI PR Review Complete')}`);
              console.log(`   Is PR: ${!!context.payload.issue?.pull_request}`);
            }

            let prNumber = null;
            let shouldRun = false;

            try {
              // Authentication verification
              console.log('üîê Verifying authentication...');
              const { data: user } = await github.rest.users.getAuthenticated();
              console.log(`‚úÖ Authenticated as: ${user.login} (${user.type})`);
            } catch (authError) {
              console.error(`‚ùå Authentication error: ${authError.message}`);
            }
            
            // REMOVED: workflow_run trigger completely eliminated to prevent race conditions
            if (context.eventName === 'issue_comment') {
              console.log('üîç ISSUE_COMMENT trigger detected - Claude FINAL VERDICT posted');
              const comment = context.payload.comment;
              if (comment && comment.body) {
                console.log(`üìù Comment from: ${comment.user.login}`);
                console.log(`üìÖ Comment created: ${comment.created_at}`);
                console.log(`üîç Comment contains FINAL VERDICT: ${comment.body.includes('FINAL VERDICT')}`);
                
                // ENHANCED: More specific Claude bot detection for issue_comment trigger
                const isClaudeBot = (comment.user.login === 'blazecommerce-automation-bot[bot]' ||
                                   comment.user.login.includes('blazecommerce-automation-bot')) &&
                                   comment.body.includes('Claude AI PR Review Complete');
                const hasFinalVerdict = comment.body.includes('FINAL VERDICT');
                const isPR = context.payload.issue && context.payload.issue.pull_request;
                
                console.log('üîç ISSUE_COMMENT Analysis:');
                console.log(`   User: ${comment.user.login}`);
                console.log(`   Is Claude bot: ${isClaudeBot}`);
                console.log(`   Has FINAL VERDICT: ${hasFinalVerdict}`);
                console.log(`   Is PR: ${isPR}`);
                console.log(`   Comment created: ${comment.created_at}`);
                
                if (isClaudeBot && hasFinalVerdict && isPR) {
                  prNumber = context.payload.issue.number;
                  shouldRun = true;
                  console.log(`‚úÖ Found Claude FINAL VERDICT in PR: ${prNumber}`);
                  console.log('üöÄ Auto-approval will proceed after timing checks');
                } else {
                  console.log('‚ùå Comment does not meet auto-approval criteria');
                  shouldRun = false;
                }
              }
            } else if (context.eventName === 'workflow_dispatch') {
              console.log('üîß WORKFLOW_DISPATCH trigger detected (manual execution)');
              prNumber = parseInt(context.payload.inputs.pr_number);
              shouldRun = true;
              console.log(`üéØ Manual trigger for PR: ${prNumber}`);
            } else {
              console.log(`‚ùå UNSUPPORTED EVENT TYPE: ${context.eventName}`);
              console.log('‚úÖ SUPPORTED EVENTS: issue_comment (with FINAL VERDICT), workflow_dispatch');
              console.log('üö´ REMOVED SUPPORT: workflow_run (caused race conditions)');
              shouldRun = false;
            }
            
            console.log('Final result - PR: ' + prNumber + ', Should run: ' + shouldRun);
            core.setOutput('pr_number', prNumber ? prNumber.toString() : '');
            core.setOutput('should_run', shouldRun.toString());

      - name: Evaluate Claude AI Approval
        if: steps.validate-trigger.outputs.trigger_valid == 'true' && steps.get-pr.outputs.should_run == 'true'
        id: evaluate
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('Evaluating Claude approval for PR #' + prNumber);

            // CRITICAL FIX: Get the latest commit timestamp to ensure Claude reviewed current changes
            console.log('üîç Getting latest commit information...');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            const latestCommitSha = pr.head.sha;
            console.log(`üìä Latest commit SHA: ${latestCommitSha}`);
            console.log(`üìä Workflow context SHA: ${context.sha}`);
            console.log(`üìä PR head SHA: ${pr.head.sha}`);

            // COMMIT CONTEXT FIX: Use PR head commit, not workflow context commit
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: latestCommitSha  // Use PR head SHA, not context.sha
            });

            const actualCommitDate = new Date(commit.commit.committer.date);
            console.log(`üìÖ Actual latest commit date: ${actualCommitDate.toISOString()}`);
            console.log(`üîç Commit context fix: Using PR head commit ${latestCommitSha.substring(0, 7)} instead of workflow context`);

            // Get comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber)
            });
            
            // CRITICAL FIX: Only consider Claude comments made AFTER the latest commit
            let claudeApproval = null;
            let validClaudeComment = null;
            
            for (const comment of comments.reverse()) {
              const isClaudeBot = (comment.user.login === 'blazecommerce-automation-bot[bot]' ||
                                 comment.user.login.includes('blazecommerce-automation-bot')) &&
                                 comment.body.includes('Claude AI PR Review Complete');
              
              if (isClaudeBot && (comment.body.includes('FINAL VERDICT') || comment.body.includes('### FINAL VERDICT'))) {
                const commentDate = new Date(comment.created_at);
                console.log(`Found Claude FINAL VERDICT comment from: ${comment.user.login}`);
                console.log(`Comment created at: ${commentDate.toISOString()}`);
                console.log(`Latest commit at: ${actualCommitDate.toISOString()}`);
                
                // CRITICAL: Only consider comments made AFTER the latest commit
                const timeDifference = commentDate.getTime() - actualCommitDate.getTime();
                const minTimeDiff = 10 * 1000; // Reduced to 10 seconds (was 30) after commit context fix

                console.log(`üîç DETAILED TIMING ANALYSIS (COMMIT CONTEXT FIXED):`);
                console.log(`   Comment date: ${commentDate.toISOString()}`);
                console.log(`   Commit date: ${actualCommitDate.toISOString()}`);
                console.log(`   Time difference: ${Math.round(timeDifference / 1000)}s`);
                console.log(`   Required minimum: ${Math.round(minTimeDiff / 1000)}s`);
                console.log(`   Using PR head commit context (not workflow context)`);

                if (commentDate > actualCommitDate && timeDifference >= minTimeDiff) {
                  console.log('‚úÖ Comment is AFTER latest commit with sufficient time gap - valid for approval');
                  validClaudeComment = comment;
                  
                  // Safe excerpt extraction
                  const verdictIndex = comment.body.indexOf('FINAL VERDICT');
                  if (verdictIndex !== -1) {
                    console.log('Comment excerpt: ' + comment.body.substring(verdictIndex, verdictIndex + 200));
                  } else {
                    console.log('Comment excerpt: ' + comment.body.substring(0, 200) + '...');
                  }

                  // Check for status with flexible formatting (handles markdown bold)
                  // FIXED: Added support for **Status**: format (asterisks before Status)
                  if (comment.body.includes('Status**: APPROVED') ||
                      comment.body.includes('Status: APPROVED') ||
                      comment.body.includes('**Status**: APPROVED')) {
                    claudeApproval = 'APPROVED';
                    console.log('Claude status: APPROVED');
                  } else if (comment.body.includes('Status**: BLOCKED') ||
                             comment.body.includes('Status: BLOCKED') ||
                             comment.body.includes('**Status**: BLOCKED')) {
                    claudeApproval = 'BLOCKED';
                    console.log('Claude status: BLOCKED');
                  } else if (comment.body.includes('Status**: CONDITIONAL') ||
                             comment.body.includes('Status: CONDITIONAL') ||
                             comment.body.includes('**Status**: CONDITIONAL')) {
                    claudeApproval = 'CONDITIONAL';
                    console.log('Claude status: CONDITIONAL');
                  }
                  break;
                } else if (commentDate <= actualCommitDate) {
                  console.log('‚ùå Comment is BEFORE or AT commit time - ignoring stale review');
                  console.log(`   Comment age: ${commentDate.toISOString()}`);
                  console.log(`   Commit age: ${actualCommitDate.toISOString()}`);
                  console.log('   This comment is for previous changes, not current commit');
                } else {
                  console.log('‚ùå Comment is too soon after commit - insufficient review time');
                  console.log(`   Time gap: ${Math.round(timeDifference / 1000)}s (minimum: ${Math.round(minTimeDiff / 1000)}s)`);
                  console.log('   Claude needs more time to properly review the changes');
                }
              }
            }
            
            if (claudeApproval === 'APPROVED') {
              console.log('‚úÖ Auto-approving PR #' + prNumber + ' based on Claude AI approval');
              console.log('üîê Authentication: Using BlazeCommerce Automation Bot');
              console.log('üìã Repository: ' + context.repo.owner + '/' + context.repo.repo);
              console.log('üéØ PR Number: ' + prNumber);
              console.log(`üìÖ Claude review timestamp: ${validClaudeComment.created_at}`);
              console.log(`üìÖ Latest commit timestamp: ${actualCommitDate.toISOString()}`);
              
              // COMMIT CONTEXT FIX: Reduced wait time since commit context issue is resolved
              const timeSinceCommit = Date.now() - actualCommitDate.getTime();
              const minWaitTime = 1 * 60 * 1000; // Reduced to 1 minute (was 3) after commit context fix

              console.log(`‚è∞ TIMING VALIDATION (COMMIT CONTEXT FIXED):`);
              console.log(`   Commit time: ${actualCommitDate.toISOString()}`);
              console.log(`   Current time: ${new Date().toISOString()}`);
              console.log(`   Time since commit: ${Math.round(timeSinceCommit / 1000)}s`);
              console.log(`   Required minimum: ${Math.round(minWaitTime / 1000)}s`);
              console.log(`   Using correct PR head commit context`);

              if (timeSinceCommit < minWaitTime) {
                const remainingWait = minWaitTime - timeSinceCommit;
                console.log(`‚è≥ Enforcing 1-minute minimum wait: ${Math.round(remainingWait / 1000)}s remaining`);
                console.log('üõ°Ô∏è This prevents premature approval before Claude has sufficient time to review');
                await new Promise(resolve => setTimeout(resolve, remainingWait));
                console.log('‚úÖ Minimum wait time completed');
              } else {
                console.log('‚úÖ Sufficient time has passed since commit');
              }

              try {
                // ENHANCED: Check for existing bot approvals AFTER the latest commit
                console.log('üîç Checking for existing bot approvals after latest commit...');

                const { data: existingReviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                // CRITICAL FIX: Only consider bot approvals made AFTER the latest commit
                const existingBotApproval = existingReviews.find(review => {
                  const reviewDate = new Date(review.submitted_at);
                  const isBot = review.user.login === 'blazecommerce-claude-ai' ||
                               (review.user.type === 'Bot' && review.user.login.includes('blazecommerce-automation'));
                  const isApproved = review.state === 'APPROVED';
                  const isAfterCommit = reviewDate > actualCommitDate;
                  
                  console.log(`   Review by ${review.user.login}: ${review.state} at ${reviewDate.toISOString()}`);
                  console.log(`   Is bot: ${isBot}, Is approved: ${isApproved}, Is after commit: ${isAfterCommit}`);
                  
                  return isBot && isApproved && isAfterCommit;
                });

                if (existingBotApproval) {
                  console.log('‚úÖ Bot approval already exists for current commit - skipping duplicate');
                  console.log('üìä Existing Review ID: ' + existingBotApproval.id);
                  console.log('üìÖ Existing Review Created: ' + existingBotApproval.submitted_at);
                  console.log('üîó Existing Review URL: ' + existingBotApproval.html_url);

                  core.setOutput('result', 'ALREADY_APPROVED');
                  core.setOutput('review_id', existingBotApproval.id);
                  core.setOutput('review_url', existingBotApproval.html_url);
                  return;
                }

                // Auto-approve the PR with comprehensive error handling and commit tracking
                console.log('üöÄ Attempting to create approval review for current commit...');

                const approvalBody = '‚úÖ **Auto-approved by BlazeCommerce Automation Bot**\n\n' +
                  'Claude AI has reviewed this PR and provided approval. This automated approval is based on Claude\'s comprehensive security and code quality analysis.\n\n' +
                  '**Status:** APPROVED by Claude AI\n' +
                  '**Automation:** BlazeCommerce Automation Bot\n' +
                  '**Trigger:** ' + context.eventName + ' (FIXED: issue_comment, not workflow_run)\n' +
                  '**Commit SHA:** ' + latestCommitSha + '\n' +
                  '**Claude Review Date:** ' + validClaudeComment.created_at + '\n' +
                  '**Commit Date:** ' + actualCommitDate.toISOString() + '\n' +
                  '**Timestamp:** ' + new Date().toISOString() + '\n' +
                  '**Race Condition Fix:** Auto-approval triggered by Claude comment posting, not workflow completion\n\n' +
                  'üîç **Verification:** This approval is specifically for commit ' + latestCommitSha.substring(0, 7) + ' and was issued only after Claude AI completed its review of the current changes.';

                const approvalResult = await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber),
                  event: 'APPROVE',
                  body: approvalBody
                });

                console.log('‚úÖ Successfully created approval review!');
                console.log('üìä Review ID: ' + approvalResult.data.id);
                console.log('üîó Review URL: ' + approvalResult.data.html_url);
                console.log('üìÖ Review Created: ' + approvalResult.data.submitted_at);

                core.setOutput('result', 'APPROVED');
                core.setOutput('review_id', approvalResult.data.id);
                core.setOutput('review_url', approvalResult.data.html_url);

              } catch (error) {
                console.error('‚ùå ERROR creating approval review: ' + error.message);
                console.error('Stack trace: ' + error.stack);
                
                // Check if it's a permissions error
                if (error.message.includes('403') || error.message.includes('permission')) {
                  console.error('üîê PERMISSIONS ERROR: Bot may not have pull-requests:write permission');
                  console.error('üîß SOLUTION: Check repository settings and bot permissions');
                } else if (error.message.includes('422')) {
                  console.error('üìã VALIDATION ERROR: PR may already be approved or in invalid state');
                  console.error('üîß SOLUTION: Check PR status and existing reviews');
                }
                
                core.setOutput('result', 'ERROR');
                core.setOutput('error', error.message);
                throw error;
              }
            } else if (claudeApproval === 'BLOCKED') {
              console.log('‚ùå PR #' + prNumber + ' blocked by Claude AI - manual review required');
              core.setOutput('result', 'BLOCKED');
            } else if (claudeApproval === 'IN_PROGRESS') {
              console.log('üîÑ PR #' + prNumber + ' - Claude review in progress, will retry when complete');
              core.setOutput('result', 'IN_PROGRESS');
            } else if (claudeApproval === 'PENDING') {
              console.log('‚è≥ PR #' + prNumber + ' - no Claude review found for current commit, manual review required');
              core.setOutput('result', 'PENDING');
            } else {
              console.log('‚è≥ PR #' + prNumber + ' - no clear Claude approval found for current commit, manual review required');
              core.setOutput('result', 'PENDING');
            }

      # FALLBACK MECHANISM: Emergency approval for edge cases
      - name: Fallback Approval Check
        if: always() && steps.validate-trigger.outputs.trigger_valid == 'true' && steps.get-pr.outputs.should_run == 'true' && (steps.evaluate.outputs.result == 'ERROR' || steps.evaluate.outputs.result == '')
        id: fallback
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('üîÑ FALLBACK APPROVAL MECHANISM ACTIVATED');
            console.log(`üìã PR Number: ${prNumber}`);
            console.log(`üìä Primary Result: ${{ steps.evaluate.outputs.result }}`);
            console.log('üéØ Attempting fallback approval detection...');

            try {
              // Re-check for Claude comments with more lenient criteria
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(prNumber)
              });

              // Look for any Claude-related comment with APPROVED status
              const claudeComment = comments.reverse().find(comment => {
                const isClaudeRelated = comment.user.login.includes('blazecommerce') ||
                                       comment.user.type === 'Bot' ||
                                       comment.body.includes('Claude AI');
                const hasApproval = comment.body.includes('FINAL VERDICT') &&
                                   (comment.body.includes('Status**: APPROVED') ||
                                    comment.body.includes('Status: APPROVED') ||
                                    comment.body.includes('**Status**: APPROVED'));
                return isClaudeRelated && hasApproval;
              });

              if (claudeComment) {
                console.log('‚úÖ Found Claude approval in fallback check');
                console.log(`üìÖ Comment date: ${claudeComment.created_at}`);
                console.log(`üë§ Comment user: ${claudeComment.user.login}`);

                // Check for existing approvals
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                const existingApproval = reviews.find(review =>
                  review.state === 'APPROVED' &&
                  (review.user.login.includes('blazecommerce') || review.user.type === 'Bot')
                );

                if (!existingApproval) {
                  console.log('üöÄ Creating fallback approval...');

                  const fallbackApprovalBody = '‚úÖ **Fallback Auto-approval by BlazeCommerce Automation Bot**\n\n' +
                    'This approval was created by the fallback mechanism after the primary approval process encountered issues. ' +
                    'Claude AI has reviewed this PR and provided approval status.\n\n' +
                    '**Status:** APPROVED by Claude AI (Fallback)\n' +
                    '**Automation:** BlazeCommerce Automation Bot (Fallback Mechanism)\n' +
                    '**Trigger:** Fallback approval after primary process failure\n' +
                    '**Claude Comment Date:** ' + claudeComment.created_at + '\n' +
                    '**Fallback Timestamp:** ' + new Date().toISOString() + '\n\n' +
                    'üîÑ **Note:** This approval was created by the enhanced fallback mechanism to ensure reliable automation.';

                  const fallbackResult = await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: parseInt(prNumber),
                    event: 'APPROVE',
                    body: fallbackApprovalBody
                  });

                  console.log('‚úÖ Fallback approval created successfully!');
                  console.log('üìä Review ID: ' + fallbackResult.data.id);
                  core.setOutput('fallback_result', 'APPROVED');
                  core.setOutput('fallback_review_id', fallbackResult.data.id);
                } else {
                  console.log('‚úÖ Existing approval found, fallback not needed');
                  core.setOutput('fallback_result', 'EXISTING_APPROVAL');
                }
              } else {
                console.log('‚ùå No Claude approval found in fallback check');
                core.setOutput('fallback_result', 'NO_APPROVAL_FOUND');
              }
            } catch (error) {
              console.error('‚ùå Fallback mechanism error: ' + error.message);
              core.setOutput('fallback_result', 'ERROR');
              core.setOutput('fallback_error', error.message);
            }

      - name: Summary
        if: always()
        run: |
          echo "üèÅ CLAUDE APPROVAL GATE WORKFLOW COMPLETED"
          echo "üìä Primary Result: ${{ steps.evaluate.outputs.result || 'SKIPPED' }}"
          echo "üîÑ Fallback Result: ${{ steps.fallback.outputs.fallback_result || 'NOT_TRIGGERED' }}"
          echo "üéØ PR Number: ${{ steps.get-pr.outputs.pr_number || 'N/A' }}"
          echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "üîç CONDITIONAL LOGIC ENHANCEMENT ACTIVE:"
          echo "  - Enhanced debugging enabled"
          echo "  - Relaxed bot user matching implemented"
          echo "  - Fallback approval mechanism available"
          echo "  - Improved error handling and logging"
