name: "Claude AI Approval Gate"

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to evaluate'
        required: true
        type: string

# Simplified concurrency management
concurrency:
  group: claude-approval-pr-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  claude-approval:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # Only trigger on Claude FINAL VERDICT comments
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, 'FINAL VERDICT') &&
       contains(github.event.comment.body, 'Claude AI PR Review Complete'))
    
    permissions:
      contents: read
      pull-requests: write
      actions: read
    
    steps:
      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}

      - name: Determine PR number
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.issue.number }}"
          fi
          
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üîç Processing PR #$PR_NUMBER"

      - name: Get PR information
        id: pr-details
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              console.log(`PR #${prNumber}: ${pr.title}`);
              console.log(`State: ${pr.state}`);
              console.log(`Head SHA: ${pr.head.sha}`);
              
              core.setOutput('pr-state', pr.state);
              core.setOutput('head-sha', pr.head.sha);
              core.setOutput('pr-title', pr.title);
              
              return pr;
            } catch (error) {
              console.error(`Error getting PR #${prNumber}:`, error);
              core.setFailed(`Failed to get PR information: ${error.message}`);
            }

      - name: Check Claude review verdict
        id: claude-verdict
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            const headSha = '${{ steps.pr-details.outputs.head-sha }}';
            
            // Get the comment that triggered this workflow
            let claudeComment;
            if (context.eventName === 'issue_comment') {
              claudeComment = context.payload.comment;
            } else {
              // For workflow_dispatch, get the latest Claude comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              claudeComment = comments
                .filter(comment => 
                  comment.body.includes('FINAL VERDICT') && 
                  comment.body.includes('Claude AI PR Review Complete')
                )
                .pop(); // Get the latest one
            }
            
            if (!claudeComment) {
              console.log('‚ùå No Claude review comment found');
              core.setOutput('approved', 'false');
              core.setOutput('verdict', 'no-review');
              return;
            }
            
            console.log(`üìù Claude comment: ${claudeComment.body.substring(0, 200)}...`);
            
            // Simple approval logic based on comment content
            const isApproved = claudeComment.body.includes('‚úÖ APPROVED') || 
                              claudeComment.body.includes('APPROVED FOR MERGE');
            
            console.log(`ü§ñ Claude verdict: ${isApproved ? 'APPROVED' : 'NOT APPROVED'}`);
            
            core.setOutput('approved', isApproved.toString());
            core.setOutput('verdict', isApproved ? 'approved' : 'rejected');
            core.setOutput('comment-id', claudeComment.id);

      - name: Auto-approve PR if Claude approved
        if: steps.claude-verdict.outputs.approved == 'true' && steps.pr-details.outputs.pr-state == 'open'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            
            try {
              // Create approval review
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: '‚úÖ Auto-approved based on Claude AI review'
              });
              
              console.log(`‚úÖ PR #${prNumber} auto-approved`);
              
              // Add approval label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['claude-approved']
              });
              
            } catch (error) {
              console.error('Error auto-approving PR:', error);
              core.setFailed(`Failed to auto-approve PR: ${error.message}`);
            }

      - name: Add rejection label if not approved
        if: steps.claude-verdict.outputs.approved == 'false' && steps.pr-details.outputs.pr-state == 'open'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr-number }};
            
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['claude-review-needed']
              });
              
              console.log(`‚ö†Ô∏è  PR #${prNumber} marked as needing review`);
              
            } catch (error) {
              console.error('Error adding label:', error);
            }

  summary:
    needs: claude-approval
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Approval Summary
        run: |
          echo "üèÅ Claude Approval Summary"
          echo "========================="
          echo "Job Result: ${{ needs.claude-approval.result }}"
          
          if [ "${{ needs.claude-approval.result }}" = "success" ]; then
            echo "‚úÖ Claude approval gate completed successfully"
          else
            echo "‚ùå Claude approval gate failed or was skipped"
          fi
