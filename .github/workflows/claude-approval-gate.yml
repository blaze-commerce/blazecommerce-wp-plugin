name: "Priority 3: Claude AI Approval Gate (Fixed Race Condition)"

# CRITICAL FIX: Enhanced workflow to prevent premature auto-approval
# This workflow now ensures Claude AI has reviewed the LATEST commit before approving
# Fixes issue where auto-approval was based on stale reviews from previous commits

# DISABLED: Replaced by claude-auto-approval-final.yml to fix race conditions
# This workflow is disabled to prevent conflicts with the new race-condition-free workflow
on:
  # Completely disabled - all triggers removed
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to evaluate'
        required: true
        type: string

# Priority 3: Claude AI Approval Gate - runs after Priority 2 completes
concurrency:
  group: priority-3-claude-approval-pr-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
  cancel-in-progress: false  # Don't cancel to ensure approval gate completion

jobs:
  claude-approval-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # CRITICAL: Only trigger on Claude FINAL VERDICT comments to prevent race conditions
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, 'FINAL VERDICT') &&
       github.event.comment.user.login == 'blazecommerce-automation-bot[bot]')
    permissions:
      # Required permissions for GitHub App authentication and PR approval
      contents: read           # Read repository content
      pull-requests: write     # Create approval reviews
      actions: read           # Read workflow run information
    steps:
      - name: Generate GitHub App Token
        id: app_token
        if: env.BC_GITHUB_APP_ID != '' && env.BC_GITHUB_APP_PRIVATE_KEY != ''
        env:
          BC_GITHUB_APP_ID: ${{ secrets.BC_GITHUB_APP_ID }}
          BC_GITHUB_APP_PRIVATE_KEY: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BC_GITHUB_APP_ID }}
          private-key: ${{ secrets.BC_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
      - name: Determine PR Number and Trigger
        id: get-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            console.log('üö® CRITICAL DEBUG: AUTO-APPROVAL WORKFLOW TRIGGERED');
            console.log(`üìã EVENT TYPE: ${context.eventName}`);
            console.log(`üìÖ TIMESTAMP: ${new Date().toISOString()}`);
            console.log('üéØ EXPECTED: issue_comment (with FINAL VERDICT from Claude)');

            let prNumber = null;
            let shouldRun = false;

            console.log('üîç BLAZECOMMERCE AUTOMATION BOT - AUTO-APPROVAL WORKFLOW');
            console.log('=' .repeat(60));
            console.log('Event: ' + context.eventName);
            console.log('üîê Authentication: Using GitHub App or BOT_GITHUB_TOKEN fallback');

            // Verify authentication
            try {
              const { data: user } = await github.rest.users.getAuthenticated();
              console.log(`‚úÖ Authenticated as: ${user.login} (${user.type})`);
              if (user.type === 'Bot') {
                console.log('ü§ñ Using GitHub App authentication');
              } else {
                console.log('üîë Using personal access token authentication');
              }
            } catch (authError) {
              console.error(`‚ùå Authentication error: ${authError.message}`);
            }
            
            // REMOVED: workflow_run trigger completely eliminated to prevent race conditions
            if (context.eventName === 'issue_comment') {
              console.log('ISSUE_COMMENT trigger detected');
              const comment = context.payload.comment;
              if (comment && comment.body) {
                // ENHANCED: More specific Claude bot detection for issue_comment trigger
                const isClaudeBot = comment.user.login === 'blazecommerce-automation-bot[bot]' &&
                                   comment.body.includes('Claude AI PR Review Complete');
                const hasFinalVerdict = comment.body.includes('FINAL VERDICT');
                const isPR = context.payload.issue && context.payload.issue.pull_request;

                console.log('üîç ISSUE_COMMENT Analysis:');
                console.log(`   User: ${comment.user.login}`);
                console.log(`   Is Claude bot: ${isClaudeBot}`);
                console.log(`   Has FINAL VERDICT: ${hasFinalVerdict}`);
                console.log(`   Is PR: ${isPR}`);
                console.log(`   Comment created: ${comment.created_at}`);

                if (isClaudeBot && hasFinalVerdict && isPR) {
                  prNumber = context.payload.issue.number;
                  shouldRun = true;
                  console.log(`‚úÖ Found Claude FINAL VERDICT in PR: ${prNumber}`);
                  console.log('üöÄ Auto-approval will proceed after timing checks');
                } else {
                  console.log('‚ùå Comment does not meet auto-approval criteria');
                  shouldRun = false;
                }
              }
            } else if (context.eventName === 'workflow_dispatch') {
              console.log('üîß WORKFLOW_DISPATCH trigger detected (manual execution)');
              prNumber = parseInt(context.payload.inputs.pr_number);
              shouldRun = true;
              console.log(`üéØ Manual trigger for PR: ${prNumber}`);
            } else {
              console.log(`‚ùå UNSUPPORTED EVENT TYPE: ${context.eventName}`);
              console.log('‚úÖ SUPPORTED EVENTS: issue_comment (with FINAL VERDICT), workflow_dispatch');
              console.log('üö´ REMOVED SUPPORT: workflow_run (caused race conditions)');
              shouldRun = false;
            }
            
            console.log('Final result - PR: ' + prNumber + ', Should run: ' + shouldRun);
            core.setOutput('pr_number', prNumber ? prNumber.toString() : '');
            core.setOutput('should_run', shouldRun.toString());

      - name: Wait for Claude Review Completion
        if: steps.get-pr.outputs.should_run == 'true'
        id: wait-claude
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('üîÑ Waiting for Claude review completion for PR #' + prNumber);

            // Get PR details to find latest commit
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            const latestCommitSha = pr.head.sha;
            console.log(`üìä Latest commit SHA: ${latestCommitSha}`);

            // Wait up to 5 minutes for Claude review to complete
            const maxWaitTime = 5 * 60 * 1000; // 5 minutes in milliseconds
            const checkInterval = 30 * 1000; // Check every 30 seconds
            const startTime = Date.now();

            while (Date.now() - startTime < maxWaitTime) {
              console.log(`‚è∞ Checking Claude review status... (${Math.round((Date.now() - startTime) / 1000)}s elapsed)`);

              // Check for Claude workflow completion
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'claude-code-review.yml',
                head_sha: latestCommitSha,
                per_page: 5
              });

              const claudeRun = workflowRuns.workflow_runs.find(run =>
                run.head_sha === latestCommitSha
              );

              if (claudeRun) {
                console.log(`üìä Claude workflow status: ${claudeRun.status} (${claudeRun.conclusion})`);

                if (claudeRun.status === 'completed') {
                  console.log('‚úÖ Claude review workflow completed');

                  // Additional wait to ensure comment is posted
                  console.log('‚è≥ Waiting 30 seconds for comment to be posted...');
                  await new Promise(resolve => setTimeout(resolve, 30000));
                  break;
                }
              }

              // Wait before next check
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            console.log('üèÅ Claude review wait period completed');

      - name: Wait for Claude Comment to be Posted
        if: steps.get-pr.outputs.should_run == 'true'
        id: wait-comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('üîç Waiting for Claude comment to be posted for PR #' + prNumber);

            // Get the latest commit SHA to verify Claude reviewed THIS commit
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            const latestCommitSha = pr.head.sha;
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: latestCommitSha
            });

            const actualCommitDate = new Date(commit.commit.committer.date);
            console.log(`üìÖ Latest commit: ${latestCommitSha} at ${actualCommitDate.toISOString()}`);

            // Wait up to 3 minutes for Claude comment to appear AFTER the latest commit
            const maxWaitTime = 3 * 60 * 1000; // 3 minutes
            const checkInterval = 10 * 1000; // Check every 10 seconds
            const startTime = Date.now();

            let claudeCommentFound = false;

            while (Date.now() - startTime < maxWaitTime && !claudeCommentFound) {
              console.log(`‚è∞ Checking for Claude comment... (${Math.round((Date.now() - startTime) / 1000)}s elapsed)`);

              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(prNumber),
                per_page: 10,
                sort: 'created',
                direction: 'desc'
              });

              // Look for Claude comment made AFTER the latest commit
              for (const comment of comments) {
                const commentDate = new Date(comment.created_at);
                const isClaudeBot = comment.user.login === 'blazecommerce-automation-bot[bot]' &&
                                   comment.body.includes('Claude AI PR Review Complete');

                if (isClaudeBot && commentDate > actualCommitDate) {
                  console.log(`‚úÖ Found Claude comment for current commit!`);
                  console.log(`   Comment date: ${commentDate.toISOString()}`);
                  console.log(`   Commit date: ${actualCommitDate.toISOString()}`);
                  claudeCommentFound = true;
                  break;
                }
              }

              if (!claudeCommentFound) {
                console.log('‚è≥ Claude comment not found yet, waiting...');
                await new Promise(resolve => setTimeout(resolve, checkInterval));
              }
            }

            if (claudeCommentFound) {
              console.log('üéØ Claude comment verified - proceeding with approval evaluation');
            } else {
              console.log('‚ö†Ô∏è Timeout waiting for Claude comment - proceeding anyway');
            }

      - name: Evaluate Claude AI Approval
        if: steps.get-pr.outputs.should_run == 'true'
        id: evaluate
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token || secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            const prNumber = '${{ steps.get-pr.outputs.pr_number }}';
            console.log('Evaluating Claude approval for PR #' + prNumber);

            // CRITICAL FIX: Get the latest commit timestamp to ensure Claude reviewed current changes
            console.log('üîç Getting latest commit information...');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            const latestCommitSha = pr.head.sha;
            const latestCommitDate = new Date(pr.updated_at); // Use PR updated_at as proxy for latest commit
            console.log(`üìä Latest commit SHA: ${latestCommitSha}`);
            console.log(`üìÖ Latest commit date: ${latestCommitDate.toISOString()}`);

            // Get the actual latest commit details for more accurate timestamp
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: latestCommitSha
            });

            const actualCommitDate = new Date(commit.commit.committer.date);
            console.log(`üìÖ Actual latest commit date: ${actualCommitDate.toISOString()}`);

            // Get comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber)
            });

            // CRITICAL FIX: Only consider Claude comments made AFTER the latest commit
            let claudeApproval = null;
            let validClaudeComment = null;

            for (const comment of comments.reverse()) {
              // STANDARDIZED: Custom Claude implementation detection
              // We use blazecommerce-automation-bot[bot] for both review and approval
              // This provides consistent branding and full workflow control
              const isClaudeBot = comment.user.login === 'blazecommerce-automation-bot[bot]' &&
                                 comment.body.includes('Claude AI PR Review Complete');

              if (isClaudeBot && (comment.body.includes('FINAL VERDICT') || comment.body.includes('### FINAL VERDICT'))) {
                const commentDate = new Date(comment.created_at);
                console.log(`Found Claude FINAL VERDICT comment from: ${comment.user.login}`);
                console.log(`Comment created at: ${commentDate.toISOString()}`);
                console.log(`Latest commit at: ${actualCommitDate.toISOString()}`);

                // CRITICAL: Only consider comments made AFTER the latest commit
                const timeDifference = commentDate.getTime() - actualCommitDate.getTime();
                const minTimeDiff = 30 * 1000; // 30 seconds minimum between commit and comment

                console.log(`üîç DETAILED TIMING ANALYSIS:`);
                console.log(`   Comment date: ${commentDate.toISOString()}`);
                console.log(`   Commit date: ${actualCommitDate.toISOString()}`);
                console.log(`   Time difference: ${Math.round(timeDifference / 1000)}s`);
                console.log(`   Required minimum: ${Math.round(minTimeDiff / 1000)}s`);

                if (commentDate > actualCommitDate && timeDifference >= minTimeDiff) {
                  console.log('‚úÖ Comment is AFTER latest commit with sufficient time gap - valid for approval');
                  validClaudeComment = comment;

                  // Safe excerpt extraction
                  const verdictIndex = comment.body.indexOf('FINAL VERDICT');
                  if (verdictIndex !== -1) {
                    console.log('Comment excerpt: ' + comment.body.substring(verdictIndex, verdictIndex + 200));
                  } else {
                    console.log('Comment excerpt: ' + comment.body.substring(0, 200) + '...');
                  }

                  // Check for status with flexible formatting (handles markdown bold)
                  if (comment.body.includes('Status**: APPROVED') || comment.body.includes('Status: APPROVED')) {
                    claudeApproval = 'APPROVED';
                    console.log('Claude status: APPROVED');
                  } else if (comment.body.includes('Status**: BLOCKED') || comment.body.includes('Status: BLOCKED')) {
                    claudeApproval = 'BLOCKED';
                    console.log('Claude status: BLOCKED');
                  } else if (comment.body.includes('Status**: CONDITIONAL') || comment.body.includes('Status: CONDITIONAL')) {
                    claudeApproval = 'CONDITIONAL';
                    console.log('Claude status: CONDITIONAL');
                  }
                  break;
                } else if (commentDate <= actualCommitDate) {
                  console.log('‚ùå Comment is BEFORE or AT commit time - ignoring stale review');
                  console.log(`   Comment age: ${commentDate.toISOString()}`);
                  console.log(`   Commit age: ${actualCommitDate.toISOString()}`);
                  console.log('   This comment is for previous changes, not current commit');
                } else {
                  console.log('‚ùå Comment is too soon after commit - insufficient review time');
                  console.log(`   Time gap: ${Math.round(timeDifference / 1000)}s (minimum: ${Math.round(minTimeDiff / 1000)}s)`);
                  console.log('   Claude needs more time to properly review the changes');
                }
              }
            }

            // ENHANCED SAFETY CHECK: If no valid Claude comment found, wait a bit more and check again
            if (!validClaudeComment) {
              console.log('‚ö†Ô∏è No valid Claude review found for current commit');
              console.log('üîÑ Performing final check after additional wait...');

              // Wait an additional 30 seconds and check one more time
              await new Promise(resolve => setTimeout(resolve, 30000));

              const { data: finalComments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(prNumber),
                per_page: 5,
                sort: 'created',
                direction: 'desc'
              });

              // Final check for Claude comments after latest commit
              for (const comment of finalComments) {
                const isClaudeBot = comment.user.login === 'blazecommerce-automation-bot[bot]' &&
                                   comment.body.includes('Claude AI PR Review Complete');

                if (isClaudeBot && (comment.body.includes('FINAL VERDICT') || comment.body.includes('### FINAL VERDICT'))) {
                  const commentDate = new Date(comment.created_at);

                  if (commentDate > actualCommitDate) {
                    console.log('‚úÖ Found Claude review in final check!');
                    validClaudeComment = comment;

                    if (comment.body.includes('Status**: APPROVED') || comment.body.includes('Status: APPROVED')) {
                      claudeApproval = 'APPROVED';
                    } else if (comment.body.includes('Status**: BLOCKED') || comment.body.includes('Status: BLOCKED')) {
                      claudeApproval = 'BLOCKED';
                    }
                    break;
                  }
                }
              }

              if (!validClaudeComment) {
                console.log('üîç Still no valid Claude review - checking if Claude is still reviewing...');

              // Check for recent workflow runs of Claude review
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'claude-code-review.yml',
                head_sha: latestCommitSha,
                per_page: 5
              });

              const recentClaudeRun = workflowRuns.workflow_runs.find(run =>
                run.head_sha === latestCommitSha &&
                (run.status === 'in_progress' || run.status === 'queued')
              );

              if (recentClaudeRun) {
                console.log('üîÑ Claude review workflow is still running - waiting for completion');
                console.log(`   Workflow status: ${recentClaudeRun.status}`);
                console.log(`   Workflow ID: ${recentClaudeRun.id}`);
                claudeApproval = 'IN_PROGRESS';
              } else {
                console.log('‚ùå No active Claude review found - may need manual trigger');
                claudeApproval = 'PENDING';
              }
            }
            
            if (claudeApproval === 'APPROVED') {
              console.log('‚úÖ Auto-approving PR #' + prNumber + ' based on Claude AI approval');
              console.log('üîê Authentication: Using BlazeCommerce Automation Bot');
              console.log('üìã Repository: ' + context.repo.owner + '/' + context.repo.repo);
              console.log('üéØ PR Number: ' + prNumber);
              console.log(`üìÖ Claude review timestamp: ${validClaudeComment.created_at}`);
              console.log(`üìÖ Latest commit timestamp: ${actualCommitDate.toISOString()}`);

              // CRITICAL FIX: Ensure minimum time gap between commit and approval
              const timeSinceCommit = Date.now() - actualCommitDate.getTime();
              const minWaitTime = 3 * 60 * 1000; // 3 minutes minimum (increased from 2)

              console.log(`‚è∞ TIMING VALIDATION:`);
              console.log(`   Commit time: ${actualCommitDate.toISOString()}`);
              console.log(`   Current time: ${new Date().toISOString()}`);
              console.log(`   Time since commit: ${Math.round(timeSinceCommit / 1000)}s`);
              console.log(`   Required minimum: ${Math.round(minWaitTime / 1000)}s`);

              if (timeSinceCommit < minWaitTime) {
                const remainingWait = minWaitTime - timeSinceCommit;
                console.log(`‚è≥ Enforcing 3-minute minimum wait: ${Math.round(remainingWait / 1000)}s remaining`);
                console.log('üõ°Ô∏è This prevents premature approval before Claude has sufficient time to review');
                await new Promise(resolve => setTimeout(resolve, remainingWait));
                console.log('‚úÖ Minimum wait time completed');
              } else {
                console.log('‚úÖ Sufficient time has passed since commit');
              }

              try {
                // ENHANCED: Check for existing bot approvals AFTER the latest commit
                console.log('üîç Checking for existing bot approvals after latest commit...');

                const { data: existingReviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                // CRITICAL FIX: Only consider bot approvals made AFTER the latest commit
                const existingBotApproval = existingReviews.find(review => {
                  const reviewDate = new Date(review.submitted_at);
                  const isBot = review.user.login === 'blazecommerce-claude-ai' ||
                               (review.user.type === 'Bot' && review.user.login.includes('blazecommerce-automation'));
                  const isApproved = review.state === 'APPROVED';
                  const isAfterCommit = reviewDate > actualCommitDate;

                  console.log(`   Review by ${review.user.login}: ${review.state} at ${reviewDate.toISOString()}`);
                  console.log(`   Is bot: ${isBot}, Is approved: ${isApproved}, Is after commit: ${isAfterCommit}`);

                  return isBot && isApproved && isAfterCommit;
                });

                if (existingBotApproval) {
                  console.log('‚úÖ Bot approval already exists for current commit - skipping duplicate');
                  console.log('üìä Existing Review ID: ' + existingBotApproval.id);
                  console.log('üìÖ Existing Review Created: ' + existingBotApproval.submitted_at);
                  console.log('üîó Existing Review URL: ' + existingBotApproval.html_url);

                  core.setOutput('result', 'ALREADY_APPROVED');
                  core.setOutput('review_id', existingBotApproval.id);
                  core.setOutput('review_url', existingBotApproval.html_url);
                  return;
                }

                // Auto-approve the PR with comprehensive error handling and commit tracking
                console.log('üöÄ Attempting to create approval review for current commit...');

                const approvalResult = await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber),
                  event: 'APPROVE',
                  body: `‚úÖ **Auto-approved by BlazeCommerce Automation Bot**

Claude AI has reviewed this PR and provided approval. This automated approval is based on Claude's comprehensive security and code quality analysis.

**Status:** APPROVED by Claude AI
**Automation:** BlazeCommerce Automation Bot
**Trigger:** ${context.eventName} (FIXED: issue_comment, not workflow_run)
**Commit SHA:** ${latestCommitSha}
**Claude Review Date:** ${validClaudeComment.created_at}
**Commit Date:** ${actualCommitDate.toISOString()}
**Timestamp:** ${new Date().toISOString()}
**Race Condition Fix:** Auto-approval triggered by Claude comment posting, not workflow completion

üîç **Verification:** This approval is specifically for commit ${latestCommitSha.substring(0, 7)} and was issued only after Claude AI completed its review of the current changes.`
                });

                console.log('‚úÖ Successfully created approval review!');
                console.log('üìä Review ID: ' + approvalResult.data.id);
                console.log('üë§ Review User: ' + approvalResult.data.user.login);
                console.log('üìÖ Review Created: ' + approvalResult.data.submitted_at);
                console.log('üîó Review URL: ' + approvalResult.data.html_url);

                // Verify the approval was created
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                const botApproval = reviews.find(review =>
                  (review.user.login === 'blazecommerce-claude-ai' ||
                   (review.user.type === 'Bot' && review.user.login.includes('blazecommerce-automation'))) &&
                  review.state === 'APPROVED'
                );

                if (botApproval) {
                  console.log('‚úÖ VERIFICATION SUCCESS: Bot approval confirmed in PR reviews');
                  console.log('üë§ Approver: ' + botApproval.user.login);
                  console.log('üìä Review State: ' + botApproval.state);
                } else {
                  console.log('‚ö†Ô∏è WARNING: Bot approval not found in PR reviews - may need manual verification');
                }

                core.setOutput('result', 'APPROVED');
                core.setOutput('review_id', approvalResult.data.id);
                core.setOutput('review_url', approvalResult.data.html_url);

              } catch (error) {
                console.error('‚ùå CRITICAL ERROR: Failed to create approval review');
                console.error('üîç Error Type: ' + error.constructor.name);
                console.error('üìù Error Message: ' + error.message);
                console.error('üìä Error Status: ' + (error.status || 'unknown'));

                if (error.response) {
                  console.error('üåê Response Status: ' + error.response.status);
                  console.error('üìÑ Response Data: ' + JSON.stringify(error.response.data, null, 2));
                }

                // Check token permissions
                try {
                  const { data: user } = await github.rest.users.getAuthenticated();
                  console.log('üîê Token User: ' + user.login);
                  console.log('üë§ User Type: ' + user.type);
                } catch (authError) {
                  console.error('‚ùå Authentication Error: ' + authError.message);
                }

                // Check repository permissions
                try {
                  const { data: repo } = await github.rest.repos.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                  console.log('üìä Repository Permissions Available: ' + JSON.stringify(repo.permissions, null, 2));
                } catch (repoError) {
                  console.error('‚ùå Repository Access Error: ' + repoError.message);
                }

                core.setOutput('result', 'ERROR');
                core.setOutput('error_message', error.message);
                throw error; // Re-throw to fail the workflow
              }
            } else if (claudeApproval === 'BLOCKED') {
              console.log('‚ùå PR #' + prNumber + ' blocked by Claude AI - manual review required');
              core.setOutput('result', 'BLOCKED');
            } else if (claudeApproval === 'IN_PROGRESS') {
              console.log('üîÑ PR #' + prNumber + ' - Claude review in progress, will retry when complete');
              core.setOutput('result', 'IN_PROGRESS');
            } else if (claudeApproval === 'PENDING') {
              console.log('‚è≥ PR #' + prNumber + ' - no Claude review found for current commit, manual review required');
              core.setOutput('result', 'PENDING');
            } else {
              console.log('‚è≥ PR #' + prNumber + ' - no clear Claude approval found for current commit, manual review required');
              core.setOutput('result', 'PENDING');
            }
