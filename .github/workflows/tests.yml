name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
        wordpress-version: [latest, 6.3, 6.2]
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost ${{ matrix.wordpress-version }}
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/
    
    - name: Install WooCommerce for testing
      run: |
        cd /tmp/wordpress/wp-content/plugins
        wget https://downloads.wordpress.org/plugin/woocommerce.latest-stable.zip
        unzip woocommerce.latest-stable.zip
        rm woocommerce.latest-stable.zip
    
    - name: Run PHPUnit tests
      run: |
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover=coverage.xml
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results-php${{ matrix.php-version }}-wp${{ matrix.wordpress-version }}
        path: |
          tests/coverage/
          phpunit.xml
    
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run PHP_CodeSniffer
      run: |
        vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=vendor/,tests/coverage/ .
      continue-on-error: true
    
    - name: Run PHPStan
      run: |
        vendor/bin/phpstan analyse --level=5 app/
      continue-on-error: true
    
  test-coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost latest
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/
    
    - name: Generate coverage report
      run: |
        vendor/bin/phpunit --configuration phpunit.xml --coverage-html=tests/coverage/html --coverage-text
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(vendor/bin/phpunit --configuration phpunit.xml --coverage-text | grep "Lines:" | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below required 80%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets requirement"
        fi
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/
