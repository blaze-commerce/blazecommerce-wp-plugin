name: "Tests"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode for troubleshooting'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Test mode: full, basic, or auto'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - full
          - basic

# Simplified concurrency management
concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Health check job to determine test mode
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      test-mode: ${{ steps.health.outputs.test-mode }}
      mysql-available: ${{ steps.health.outputs.mysql-available }}
      wordpress-available: ${{ steps.health.outputs.wordpress-available }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MySQL service
        run: |
          sudo systemctl start mysql
          sudo mysql -e "CREATE USER 'root'@'127.0.0.1' IDENTIFIED BY 'root';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'127.0.0.1';"
          sudo mysql -e "FLUSH PRIVILEGES;"

      - name: Run health check
        id: health
        run: |
          chmod +x scripts/health-check.sh
          TEST_MODE=$(scripts/health-check.sh "${{ github.event.inputs.test_mode || 'auto' }}")
          echo "test-mode=$TEST_MODE" >> $GITHUB_OUTPUT
          
          # Set individual service availability flags
          if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1;" &>/dev/null; then
            echo "mysql-available=true" >> $GITHUB_OUTPUT
          else
            echo "mysql-available=false" >> $GITHUB_OUTPUT
          fi
          
          if timeout 10 curl -s --head "https://api.wordpress.org/core/version-check/1.7/" &>/dev/null; then
            echo "wordpress-available=true" >> $GITHUB_OUTPUT
          else
            echo "wordpress-available=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: health-check
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT || 20 }}

    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        wordpress-version: [latest, '6.4', '6.3']
        exclude:
          - php-version: '8.2'
            wordpress-version: '6.3'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Simple service validation
      run: |
        echo "üîç Test Configuration:"
        echo "  PHP Version: ${{ matrix.php-version }}"
        echo "  WordPress Version: ${{ matrix.wordpress-version }}"
        echo "  Test Mode: ${{ needs.health-check.outputs.test-mode }}"
        echo "  MySQL Available: ${{ needs.health-check.outputs.mysql-available }}"
        echo "  WordPress Available: ${{ needs.health-check.outputs.wordpress-available }}"

        # Simple MySQL check with timeout
        if [ "${{ needs.health-check.outputs.mysql-available }}" = "true" ]; then
          echo "‚úÖ MySQL service is available"
          # Quick connectivity test
          timeout 30 bash -c 'until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do sleep 1; done'
          echo "‚úÖ MySQL connection verified"
        else
          echo "‚ö†Ô∏è  MySQL service unavailable - will use fallback mode"
        fi

    - name: Install system dependencies
      run: |
        echo "üì¶ Installing system dependencies..."
        
        # Install only essential dependencies
        sudo apt-get update -qq
        sudo apt-get install -y mysql-client curl wget unzip git
        
        # Install SVN only if WordPress tests are needed
        if [ "${{ needs.health-check.outputs.test-mode }}" = "full" ]; then
          sudo apt-get install -y subversion
        fi
        
        echo "‚úÖ System dependencies installed"

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql, bcmath, intl, gd, fileinfo
        coverage: ${{ needs.health-check.outputs.test-mode == 'full' && 'xdebug' || 'none' }}
        ini-values: |
          memory_limit=512M
          max_execution_time=300
        tools: composer:v2, phpunit
    
    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-composer-

    - name: Install Composer dependencies
      run: |
        echo "üì¶ Installing Composer dependencies..."
        
        # Simple composer installation with basic error handling
        if ! composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader; then
          echo "‚ö†Ô∏è  Composer install failed, trying without lock file..."
          rm -f composer.lock
          composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
        fi
        
        echo "‚úÖ Composer dependencies installed"

    - name: Run tests with graceful degradation
      run: |
        echo "üß™ Running tests in ${{ needs.health-check.outputs.test-mode }} mode..."
        
        # Make test script executable
        chmod +x scripts/run-tests.sh
        
        # Run tests based on detected mode
        scripts/run-tests.sh "${{ needs.health-check.outputs.test-mode }}" "${{ matrix.php-version }}" "${{ matrix.wordpress-version }}" "${{ github.event.inputs.debug_mode || 'false' }}"
        
        echo "‚úÖ Tests completed successfully"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-php${{ matrix.php-version }}-wp${{ matrix.wordpress-version }}-${{ needs.health-check.outputs.test-mode }}
        path: |
          /tmp/test-execution.log
          /tmp/health-check.log
          coverage.xml
        retention-days: 7

  # Summary job to report overall results
  summary:
    needs: [health-check, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "üèÅ Test Workflow Summary"
          echo "======================="
          echo "Test Mode: ${{ needs.health-check.outputs.test-mode }}"
          echo "MySQL Available: ${{ needs.health-check.outputs.mysql-available }}"
          echo "WordPress Available: ${{ needs.health-check.outputs.wordpress-available }}"
          echo "Test Job Result: ${{ needs.test.result }}"
          
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "‚úÖ All tests completed successfully"
          else
            echo "‚ùå Some tests failed - check individual job results"
          fi
