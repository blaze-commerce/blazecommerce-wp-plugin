name: Auto Version Bump

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
    paths-ignore:
      # Files managed by the version bump process itself
      - 'CHANGELOG.md'
      - 'package.json'
      - 'package-lock.json'
      - 'blaze-wooless.php'
      - 'blocks/package.json'

      # CI/CD and development tooling (no user impact)
      - '.github/**'
      - 'scripts/**'
      - 'tests/**'
      - 'test/**'
      - 'bin/**'

      # Internal documentation (no user impact)
      - 'docs/**'
      - 'CONTRIBUTING.md'
      - 'TODO'
      - 'IMPLEMENTATION_SUMMARY.md'
      - 'VERSION_BUMP_BEHAVIOR_EXPLANATION.md'
      - 'CHANGELOG_VERSION_FIX.md'

      # Development configuration files
      - 'phpunit.xml'
      - 'jest.config.js'
      - 'github-workflows-tests.yml'
      - 'test.html'

      # Auto-generated files
      - 'composer.lock'
      - 'vendor/**'
      - 'blocks/yarn.lock'
      - 'blocks/package-lock.json'

      # Git and editor files
      - '.gitignore'
      - '.editorconfig'
      - '**/.DS_Store'

      # AI assistant and editor configuration
      - '.augment/**'
      - '.claude/**'
      - '.vscode/**'

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'chore(release)') && !contains(github.event.head_commit.message, '[no version]')"
    permissions:
      contents: write
      pull-requests: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.AUTOMATION_TOKEN || secrets.BC_GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Run version system tests
      run: |
        echo "üß™ Running version system tests..."

        # Check if test script exists before running
        if npm run test:version-system --silent 2>/dev/null; then
          echo "‚úÖ Version system tests passed"
        elif [ $? -eq 127 ] || ! npm run | grep -q "test:version-system"; then
          echo "‚ö†Ô∏è  test:version-system script not found, running fallback validation..."

          # Fallback: Basic validation of core functions
          node -e "
            try {
              const semver = require('./scripts/semver-utils');
              console.log('‚úÖ semver-utils module loads successfully');

              // Test basic functions exist
              if (typeof semver.incrementVersion !== 'function') throw new Error('incrementVersion function missing');
              if (typeof semver.findNextAvailableVersion !== 'function') throw new Error('findNextAvailableVersion function missing');
              if (typeof semver.tagExists !== 'function') throw new Error('tagExists function missing');

              console.log('‚úÖ Core functions are available');
              console.log('‚úÖ Fallback validation passed');
            } catch (error) {
              console.error('‚ùå Fallback validation failed:', error.message);
              process.exit(1);
            }
          "
        else
          echo "‚ùå Version system tests failed. Aborting version bump."
          echo "   Exit code: $?"
          echo "   Please check test implementation and dependencies"
          exit 1
        fi

    - name: Validate current version system
      run: |
        echo "üîç Validating current version system..."
        # Skip conflict checking since we handle version conflicts in the workflow
        node scripts/validate-version.js --verbose --no-conflicts
        if [ $? -ne 0 ]; then
          echo "‚ùå Version validation failed. Aborting version bump."
          exit 1
        fi

    - name: Determine prerelease type based on branch
      id: prerelease_type
      run: |
        echo "üåø Determining prerelease type based on branch..."
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        echo "üìã Current branch: $BRANCH_NAME"

        # Branch-based prerelease strategy
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          echo "PRERELEASE=alpha" >> $GITHUB_OUTPUT
          echo "üî¨ Feature branch detected ‚Üí alpha prerelease"
        elif [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "PRERELEASE=beta" >> $GITHUB_OUTPUT
          echo "üß™ Develop branch detected ‚Üí beta prerelease"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          echo "PRERELEASE=rc" >> $GITHUB_OUTPUT
          echo "üöÄ Release branch detected ‚Üí release candidate"
        elif [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "master" ]]; then
          echo "PRERELEASE=" >> $GITHUB_OUTPUT
          echo "üì¶ Main branch detected ‚Üí stable release"
        else
          echo "PRERELEASE=" >> $GITHUB_OUTPUT
          echo "üîß Other branch detected ‚Üí stable release"
        fi

    - name: Validate version consistency
      id: version_validation
      run: |
        echo "üîç Validating version consistency between package.json and git tags..."

        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        EXPECTED_TAG="v$PACKAGE_VERSION"

        echo "üì¶ Package version: $PACKAGE_VERSION"
        echo "üè∑Ô∏è  Last git tag: $LAST_TAG"
        echo "üéØ Expected tag: $EXPECTED_TAG"

        if [ "$LAST_TAG" != "$EXPECTED_TAG" ]; then
          echo "‚ö†Ô∏è  Version mismatch detected!"
          echo "   Package.json version: $PACKAGE_VERSION"
          echo "   Last git tag: $LAST_TAG"
          echo "   This may cause unexpected version bumps due to analyzing too many commits"
          echo "VERSION_MISMATCH=true" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Version consistency validated"
          echo "VERSION_MISMATCH=false" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Determine version bump type
      id: bump_type
      run: |
        echo "üîç Analyzing commits for version bump type..."

        # Check for version mismatch and adjust analysis scope accordingly
        VERSION_MISMATCH="${{ steps.version_validation.outputs.VERSION_MISMATCH }}"
        PACKAGE_VERSION="${{ steps.version_validation.outputs.PACKAGE_VERSION }}"

        if [ "$VERSION_MISMATCH" = "true" ]; then
          echo "‚ö†Ô∏è  Version mismatch detected - using limited commit analysis"
          echo "üìã Analyzing only recent commits to avoid historical feature detection"
          # When there's a version mismatch, only analyze recent commits (last 10)
          # to avoid picking up historical features that should not trigger version bumps
          COMMITS=$(git log --oneline --no-merges --format="%s" -10)
          echo "üîß Limited analysis: analyzing last 10 commits only"
        else
          # Normal analysis: get commits since last version tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "üìã Analyzing commits since tag: $LAST_TAG"
            COMMITS=$(git log --oneline --no-merges --format="%s" ${LAST_TAG}..HEAD)
          else
            echo "üìã No previous tags found, analyzing last 50 commits"
            COMMITS=$(git log --oneline --no-merges --format="%s" -50)
          fi
        fi

        if [ -z "$COMMITS" ]; then
          echo "‚ÑπÔ∏è  No commits found to analyze"
          echo "BUMP_TYPE=none" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "üìä Commits to analyze:"
        echo "$COMMITS" | head -10
        if [ $(echo "$COMMITS" | wc -l) -gt 10 ]; then
          echo "... and $(( $(echo "$COMMITS" | wc -l) - 10 )) more"
        fi
        echo ""

        # Enhanced conventional commit detection
        HAS_BREAKING=false
        HAS_FEATURE=false
        HAS_FIX=false
        HAS_PERF=false

        while IFS= read -r commit; do
          # Skip empty lines
          [ -z "$commit" ] && continue

          # Check for breaking changes (multiple patterns)
          if echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci)(\(.+\))?!:" || \
             echo "$commit" | grep -qE "BREAKING CHANGE" || \
             echo "$commit" | grep -qE "^(feat|fix)!(\(.+\))?:"; then
            HAS_BREAKING=true
            echo "üí• Breaking change detected: $commit"
          # Check for features
          elif echo "$commit" | grep -qE "^feat(\(.+\))?:"; then
            HAS_FEATURE=true
            echo "‚ú® Feature detected: $commit"
          # Check for fixes and performance improvements
          elif echo "$commit" | grep -qE "^(fix|perf)(\(.+\))?:"; then
            if echo "$commit" | grep -qE "^fix(\(.+\))?:"; then
              HAS_FIX=true
              echo "üêõ Fix detected: $commit"
            else
              HAS_PERF=true
              echo "‚ö° Performance improvement detected: $commit"
            fi
          fi
        done <<< "$COMMITS"

        # Determine bump type based on priority
        if [ "$HAS_BREAKING" = true ]; then
          echo "BUMP_TYPE=major" >> $GITHUB_OUTPUT
          echo "üöÄ Result: MAJOR version bump (breaking changes detected)"
        elif [ "$HAS_FEATURE" = true ]; then
          echo "BUMP_TYPE=minor" >> $GITHUB_OUTPUT
          echo "üöÄ Result: MINOR version bump (new features detected)"
        elif [ "$HAS_FIX" = true ] || [ "$HAS_PERF" = true ]; then
          echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          echo "üöÄ Result: PATCH version bump (fixes/improvements detected)"
        else
          echo "BUMP_TYPE=none" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  Result: No version bump (no conventional commits found)"
        fi

    - name: Preview version bump
      if: steps.bump_type.outputs.BUMP_TYPE != 'none'
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "üì¶ Current version: $CURRENT_VERSION"
        echo "üîÑ Bump type: ${{ steps.bump_type.outputs.BUMP_TYPE }}"

        # Calculate new version with prerelease support
        PRERELEASE_TYPE="${{ steps.prerelease_type.outputs.PRERELEASE }}"
        echo "üè∑Ô∏è  Prerelease type: ${PRERELEASE_TYPE:-'none (stable release)'}"

        case "${{ steps.bump_type.outputs.BUMP_TYPE }}" in
          "major")
            NEW_VERSION=$(node -e "
              const semver = require('./scripts/semver-utils');
              const prerelease = '$PRERELEASE_TYPE' || null;
              console.log(semver.incrementVersion('$CURRENT_VERSION', 'major', prerelease));
            ")
            ;;
          "minor")
            NEW_VERSION=$(node -e "
              const semver = require('./scripts/semver-utils');
              const prerelease = '$PRERELEASE_TYPE' || null;
              console.log(semver.incrementVersion('$CURRENT_VERSION', 'minor', prerelease));
            ")
            ;;
          "patch")
            NEW_VERSION=$(node -e "
              const semver = require('./scripts/semver-utils');
              const prerelease = '$PRERELEASE_TYPE' || null;
              console.log(semver.incrementVersion('$CURRENT_VERSION', 'patch', prerelease));
            ")
            ;;
        esac

        # Validate that NEW_VERSION was calculated
        if [ -z "$NEW_VERSION" ]; then
          echo "‚ùå Error: NEW_VERSION was not calculated properly"
          exit 1
        fi

        # Handle edge case: Version conflict resolution
        # This occurs when conventional commits would result in the same version as current
        # (e.g., when no conventional commits are found but BUMP_TYPE was determined)
        # Solution: Force a patch increment to ensure version progression
        if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
          echo "‚ö†Ô∏è  Version conflict detected:"
          echo "   Current version: $CURRENT_VERSION"
          echo "   Calculated version: $NEW_VERSION"
          echo "üîÑ Auto-resolving by forcing patch version increment..."

          # Force patch increment using validated semver utilities
          FORCED_VERSION=$(node -e "
            try {
              const semver = require('./scripts/semver-utils');
              const newVersion = semver.incrementVersion('$CURRENT_VERSION', 'patch');
              console.log(newVersion);
            } catch (error) {
              console.error('Error incrementing version:', error.message);
              process.exit(1);
            }
          ")

          # Validate the forced version was generated successfully
          if [ $? -eq 0 ] && [ -n "$FORCED_VERSION" ]; then
            NEW_VERSION="$FORCED_VERSION"
            echo "‚úÖ Version conflict resolved:"
            echo "   New version: $NEW_VERSION"
            echo "   Bump type: PATCH (auto-forced)"
            echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Error: Failed to generate forced patch version"
            exit 1
          fi
        fi

        # Enhanced auto-increment logic using extracted conflict resolution module
        # Addresses Claude AI recommendation to extract complex workflow logic
        echo "üîç Starting version conflict resolution..."

        PRERELEASE_TYPE="${{ steps.prerelease_type.outputs.PRERELEASE }}"

        # Use the extracted conflict resolution script for better maintainability
        RESOLUTION_RESULT=$(node scripts/resolve-version-conflicts.js "$NEW_VERSION" "$PRERELEASE_TYPE")
        RESOLUTION_EXIT_CODE=$?

        if [ $RESOLUTION_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Version conflict resolution failed"
          echo "$RESOLUTION_RESULT"
          exit 1
        fi

        # Extract resolved version from output
        RESOLVED_VERSION=$(echo "$RESOLUTION_RESULT" | grep "üì¶ Final resolved version:" | sed 's/.*: //')

        if [ -n "$RESOLVED_VERSION" ] && [ "$RESOLVED_VERSION" != "$NEW_VERSION" ]; then
          echo "üîÑ Version updated due to conflict resolution:"
          echo "   Original: $NEW_VERSION"
          echo "   Resolved: $RESOLVED_VERSION"
          NEW_VERSION="$RESOLVED_VERSION"

          # Update bump type to patch since we're doing patch increments for resolution
          echo "BUMP_TYPE=patch" >> $GITHUB_OUTPUT
        fi

        echo "üì¶ Final version will be: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Bump version
      if: steps.bump_type.outputs.BUMP_TYPE != 'none'
      run: |
        echo "üîÑ Bumping version using npm scripts..."
        npm run version:${{ steps.bump_type.outputs.BUMP_TYPE }}

        echo "‚úÖ Version bump completed"
        UPDATED_VERSION=$(node -p "require('./package.json').version")
        echo "üì¶ Updated version: $UPDATED_VERSION"

    - name: Update changelog
      if: steps.bump_type.outputs.BUMP_TYPE != 'none'
      run: |
        echo "üìù Updating changelog..."
        npm run changelog
        echo "‚úÖ Changelog updated"

    - name: Validate post-bump version system
      if: steps.bump_type.outputs.BUMP_TYPE != 'none'
      run: |
        echo "üîç Validating version system after bump..."
        FINAL_VERSION=$(node -p "require('./package.json').version")
        echo "üì¶ Validating final version: $FINAL_VERSION"

        # Use --no-conflicts flag since we've already resolved conflicts in the bump process
        node scripts/validate-version.js --verbose --no-conflicts
        if [ $? -ne 0 ]; then
          echo "‚ùå Post-bump validation failed. This indicates an issue with the version update process."
          echo "   Final version: $FINAL_VERSION"
          echo "   This suggests a problem with file consistency or version format."
          exit 1
        fi

        # Additional verification: Ensure git tag was created successfully
        TAG_NAME="v$FINAL_VERSION"
        if git rev-parse --verify "$TAG_NAME" >/dev/null 2>&1; then
          echo "‚úÖ Git tag $TAG_NAME exists and is valid"
        else
          echo "‚ö†Ô∏è  Git tag $TAG_NAME was not found (this is expected - tag will be created during commit)"
        fi

        echo "‚úÖ Post-bump validation passed successfully"
        echo "üì¶ All version files are consistent at version: $FINAL_VERSION"

    - name: Commit version bump
      if: steps.bump_type.outputs.BUMP_TYPE != 'none'
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "üìù Committing version bump to $VERSION..."

        git add .
        git commit -m "chore(release): bump version to $VERSION [skip ci]

        ü§ñ Automated version bump
        üì¶ Version: $VERSION
        üîÑ Bump type: ${{ steps.bump_type.outputs.BUMP_TYPE }}
        üìù Updated files: package.json, blaze-wooless.php, blocks/package.json, CHANGELOG.md"

        echo "üöÄ Pushing changes..."
        git push

        echo "‚úÖ Version bump completed and pushed successfully!"
