name: "Auto Version Bump"

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

# Simplified concurrency management
concurrency:
  group: auto-version-${{ github.repository }}
  cancel-in-progress: false

jobs:
  auto-version:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run on main branch pushes or manual dispatch
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      version-updated: ${{ steps.version-check.outputs.version-updated }}
      new-version: ${{ steps.version-check.outputs.new-version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if version update needed
        id: version-check
        run: |
          echo "üîç Checking if version update is needed..."
          
          # Get current version from plugin file
          CURRENT_VERSION=$(grep "Version:" blazecommerce.php | head -1 | sed 's/.*Version: *//' | sed 's/ .*//')
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this is a version bump commit (skip if it is)
          if git log -1 --pretty=%B | grep -q "chore: bump version"; then
            echo "‚è≠Ô∏è  Skipping version bump - this is already a version commit"
            echo "version-updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine version bump type
          VERSION_TYPE="${{ github.event.inputs.version_type || 'auto' }}"
          
          if [ "$VERSION_TYPE" = "auto" ]; then
            # Auto-detect based on commit messages since last version tag
            if git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | grep -q "BREAKING CHANGE\|feat!:"; then
              VERSION_TYPE="major"
            elif git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | grep -q "feat:"; then
              VERSION_TYPE="minor"
            else
              VERSION_TYPE="patch"
            fi
          fi
          
          echo "Version bump type: $VERSION_TYPE"
          echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calc-version
        run: |
          echo "üßÆ Calculating new version..."
          
          CURRENT_VERSION="${{ steps.version-check.outputs.current-version }}"
          VERSION_TYPE="${{ steps.version-check.outputs.version-type }}"
          
          # Simple version calculation
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $VERSION_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in files
        run: |
          echo "üìù Updating version in files..."
          
          NEW_VERSION="${{ steps.calc-version.outputs.new-version }}"
          
          # Update main plugin file
          sed -i "s/Version: .*/Version: $NEW_VERSION/" blazecommerce.php
          
          # Update readme.txt if it exists
          if [ -f "readme.txt" ]; then
            sed -i "s/Stable tag: .*/Stable tag: $NEW_VERSION/" readme.txt
          fi
          
          # Update package.json if it exists
          if [ -f "package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          fi
          
          echo "‚úÖ Version updated to $NEW_VERSION"

      - name: Commit and tag version
        run: |
          echo "üè∑Ô∏è  Committing and tagging new version..."
          
          NEW_VERSION="${{ steps.calc-version.outputs.new-version }}"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "‚è≠Ô∏è  No changes to commit"
            echo "version-updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Commit changes
          git add .
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # Create tag
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          
          # Push changes and tag
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "version-updated=true" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version $NEW_VERSION committed and tagged"

  summary:
    needs: auto-version
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Version Summary
        run: |
          echo "üèÅ Auto Version Summary"
          echo "====================="
          echo "Version Updated: ${{ needs.auto-version.outputs.version-updated }}"
          echo "New Version: ${{ needs.auto-version.outputs.new-version }}"
          
          if [ "${{ needs.auto-version.outputs.version-updated }}" = "true" ]; then
            echo "‚úÖ Version successfully updated to ${{ needs.auto-version.outputs.new-version }}"
          else
            echo "‚è≠Ô∏è  No version update needed"
          fi
