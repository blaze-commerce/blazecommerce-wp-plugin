name: BlazeCommerce Claude AI Review Bot (Official Action Only)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ["*"]
    types: [completed]

jobs:
  claude-review-official:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reduced timeout since official action is more reliable
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: read
      
    steps:
      - name: Validate Organization
        run: |
          if [[ "${{ github.repository_owner }}" != "blaze-commerce" ]]; then
            echo "‚ùå This workflow is only for blaze-commerce repositories"
            exit 1
          fi
          echo "‚úÖ Organization validation passed"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Repository Type
        id: repo-context
        run: |
          repo_name="${{ github.repository }}"
          
          if [[ "$repo_name" == *"frontend"* ]]; then
            echo "repo_type=nextjs-frontend" >> $GITHUB_OUTPUT
            echo "üéØ Repository type: Next.js Frontend"
          elif [[ "$repo_name" == *"wp-plugin"* ]] || [[ "$repo_name" == *"plugin"* ]]; then
            echo "repo_type=wordpress-plugin" >> $GITHUB_OUTPUT
            echo "üéØ Repository type: WordPress Plugin"
          elif [[ "$repo_name" == *"child"* ]] || [[ "$repo_name" == *"theme"* ]]; then
            echo "repo_type=wordpress-child-theme" >> $GITHUB_OUTPUT
            echo "üéØ Repository type: WordPress Child Theme"
          else
            echo "repo_type=general" >> $GITHUB_OUTPUT
            echo "üéØ Repository type: General"
          fi

      - name: Prepare BlazeCommerce Context
        id: prepare-context
        uses: actions/github-script@v7
        with:
          script: |
            const repoType = '${{ steps.repo-context.outputs.repo_type }}';
            
            // Repository-specific prompts for BlazeCommerce standards
            const prompts = {
              'nextjs-frontend': `
                You are reviewing a Next.js/React frontend for BlazeCommerce e-commerce platform.
                
                Focus on:
                - React component patterns and hooks usage
                - TypeScript type safety and interface design
                - Performance optimization (Core Web Vitals)
                - SEO best practices and meta tag management
                - E-commerce UX patterns and accessibility
                - State management and data fetching patterns
                - Component reusability and maintainability
                - Error boundaries and loading states
                - Mobile responsiveness and cross-browser compatibility
                - Bundle size optimization and code splitting
                
                Provide categorized feedback:
                üî¥ REQUIRED - Critical issues that must be fixed
                üü° IMPORTANT - Significant improvements needed  
                üîµ SUGGESTIONS - Optional enhancements
                
                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'wordpress-plugin': `
                You are reviewing a WordPress plugin for BlazeCommerce e-commerce platform.
                
                Focus on:
                - WordPress coding standards and best practices
                - Security considerations (sanitization, validation, nonces)
                - Database operations and query optimization
                - Hook usage and action/filter implementation
                - Plugin architecture and modularity
                - Compatibility with different WordPress versions
                - Performance impact on WordPress sites
                - Proper enqueuing of scripts and styles
                - Internationalization and localization
                - Error handling and logging
                - Admin interface and user experience
                - REST API implementation and security
                - WooCommerce integration best practices
                
                Provide categorized feedback:
                üî¥ REQUIRED - Critical issues that must be fixed
                üü° IMPORTANT - Significant improvements needed
                üîµ SUGGESTIONS - Optional enhancements
                
                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'wordpress-child-theme': `
                You are reviewing a WordPress child theme for BlazeCommerce e-commerce platform.
                
                Focus on:
                - Theme hierarchy and WordPress standards
                - CSS organization and maintainability
                - Responsive design and mobile optimization
                - Cross-browser compatibility
                - Performance optimization (CSS/JS)
                - Accessibility compliance (WCAG guidelines)
                - SEO optimization
                - Theme customization best practices
                - PHP template structure and security
                - Asset optimization and loading
                
                Provide categorized feedback:
                üî¥ REQUIRED - Critical issues that must be fixed
                üü° IMPORTANT - Significant improvements needed
                üîµ SUGGESTIONS - Optional enhancements
                
                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'general': `
                You are reviewing code for BlazeCommerce platform.
                
                Focus on:
                - Code quality and best practices
                - Potential bugs or issues
                - Performance considerations
                - Security concerns
                - Test coverage and quality
                - Documentation completeness
                - Error handling and edge cases
                - Code maintainability and readability
                
                Provide categorized feedback:
                üî¥ REQUIRED - Critical issues that must be fixed
                üü° IMPORTANT - Significant improvements needed
                üîµ SUGGESTIONS - Optional enhancements
                
                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `
            };

            const selectedPrompt = prompts[repoType] || prompts['general'];
            
            // Add PR context
            const prContext = `
            
            ## Pull Request Context
            - Repository: ${context.repo.owner}/${context.repo.repo}
            - PR #${context.issue.number}: ${context.payload.pull_request?.title || 'N/A'}
            - Author: ${context.payload.pull_request?.user?.login || 'N/A'}
            - Type: ${repoType}
            
            Please provide a comprehensive code review with specific, actionable recommendations.
            `;
            
            const fullPrompt = selectedPrompt + prContext;
            
            // Set output for official action
            core.setOutput('review_prompt', fullPrompt);
            core.setOutput('repo_type', repoType);
            
            console.log(`‚úÖ BlazeCommerce context prepared for ${repoType} repository`);

      - name: Claude AI Review (Official Action - Attempt 1)
        id: claude-review-1
        continue-on-error: true
        uses: anthropics/claude-code-action@v1.0.0
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Wait Before Retry (30s)
        if: steps.claude-review-1.outcome == 'failure'
        run: |
          echo "‚è≥ Waiting 30s before retry..."
          sleep 30

      - name: Claude AI Review (Official Action - Attempt 2)
        id: claude-review-2
        if: steps.claude-review-1.outcome == 'failure'
        continue-on-error: true
        uses: anthropics/claude-code-action@v1.0.0
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Wait Before Final Retry (60s)
        if: steps.claude-review-1.outcome == 'failure' && steps.claude-review-2.outcome == 'failure'
        run: |
          echo "‚è≥ Waiting 60s before final retry..."
          sleep 60

      - name: Claude AI Review (Official Action - Attempt 3)
        id: claude-review-3
        if: steps.claude-review-1.outcome == 'failure' && steps.claude-review-2.outcome == 'failure'
        continue-on-error: true
        uses: anthropics/claude-code-action@v1.0.0
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Determine Review Success
        id: review-status
        uses: actions/github-script@v7
        with:
          script: |
            const attempt1 = '${{ steps.claude-review-1.outcome }}';
            const attempt2 = '${{ steps.claude-review-2.outcome }}';
            const attempt3 = '${{ steps.claude-review-3.outcome }}';
            
            if (attempt1 === 'success') {
              console.log('‚úÖ Claude AI review completed successfully on attempt 1');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '1');
            } else if (attempt2 === 'success') {
              console.log('‚úÖ Claude AI review completed successfully on attempt 2');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '2');
            } else if (attempt3 === 'success') {
              console.log('‚úÖ Claude AI review completed successfully on attempt 3');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '3');
            } else {
              console.log('‚ùå All Claude AI review attempts failed');
              core.setOutput('success', 'false');
              core.setOutput('error', 'All attempts failed after 3 retries');
            }

      - name: Post BlazeCommerce Summary
        if: steps.review-status.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const repoType = '${{ steps.prepare-context.outputs.repo_type }}';
            const attempt = '${{ steps.review-status.outputs.attempt }}';
            
            const summaryComment = `## ü§ñ BlazeCommerce Claude AI Review Summary
            
            ‚úÖ **Review completed successfully using official Anthropic action**
            
            ### üìä Review Details
            - **Repository Type**: ${repoType}
            - **Completed on Attempt**: ${attempt}
            - **Review Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC
            - **Authentication**: Official Anthropic GitHub Action (resilient)
            
            ### üéØ BlazeCommerce Standards Applied
            This review follows BlazeCommerce-specific standards for ${repoType} repositories, including:
            - Security best practices and vulnerability assessment
            - Performance optimization guidelines and recommendations
            - Code quality standards and maintainability patterns
            - E-commerce integration patterns and user experience
            
            The detailed technical review has been posted above by \`claude[bot]\`.
            
            *Powered by BlazeCommerce Claude AI Review Bot v3.0 - Official Action Only*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summaryComment
            });

      - name: Handle Review Failure
        if: steps.review-status.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const errorComment = `## ‚ö†Ô∏è BlazeCommerce Claude AI Review Failed
            
            The automated code review failed after 3 attempts using the official Anthropic action.
            
            ### üîç Possible Causes
            - Temporary API service overload (Error 529)
            - Network connectivity issues
            - Large PR size exceeding processing limits
            
            ### üõ†Ô∏è Next Steps
            1. **Wait and Retry**: Push a new commit to trigger another review attempt
            2. **Manual Review**: Request manual code review from team members
            3. **Service Status**: Check [Anthropic Status](https://status.anthropic.com/) for service updates
            
            ### üìä Attempt Details
            - **All 3 attempts failed** using official Anthropic GitHub Action
            - **Authentication**: Using official action (most reliable method)
            - **Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC
            
            *BlazeCommerce Claude AI Review Bot v3.0 - Official Action Only*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: errorComment
            });

  auto-approve:
    needs: claude-review-official
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    permissions:
      contents: read
      pull-requests: write
      checks: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Auto-Approval Criteria
        id: check-criteria
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            console.log('üîç Checking auto-approval criteria...');
            
            // Step 1: Check if Claude review succeeded
            const claudeReviewSuccess = '${{ needs.claude-review-official.outputs.success }}' === 'true';
            console.log(`Claude Review Success: ${claudeReviewSuccess}`);
            
            // Step 2: Check GitHub Actions status
            try {
              const checkRuns = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request?.head?.sha
              });
              
              const failedChecks = checkRuns.data.check_runs.filter(check => 
                check.conclusion === 'failure' || check.conclusion === 'cancelled'
              );
              
              if (failedChecks.length > 0) {
                console.log(`‚ùå Found ${failedChecks.length} failed checks`);
                core.setOutput('criteria_met', 'false');
                core.setOutput('reason', 'Failed GitHub Actions checks');
                return { approved: false, reason: 'Failed checks' };
              }
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not check GitHub Actions status: ${error.message}`);
            }
            
            // Step 3: Check tracking file if it exists
            const trackingFile = '.github/CLAUDE_REVIEW_TRACKING.md';
            let trackingStatus = 'not-found';
            
            try {
              if (fs.existsSync(trackingFile)) {
                const trackingContent = fs.readFileSync(trackingFile, 'utf8');
                
                // Check for completion indicators
                if (trackingContent.includes('All critical and important recommendations implemented') ||
                    trackingContent.includes('Implementation Rate: 100%') ||
                    trackingContent.includes('Status: All Claude AI bot recommendations successfully implemented')) {
                  trackingStatus = 'complete';
                } else {
                  trackingStatus = 'incomplete';
                }
              }
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not read tracking file: ${error.message}`);
            }
            
            console.log(`Tracking file status: ${trackingStatus}`);
            
            // Auto-approve if Claude review succeeded OR tracking shows completion
            if (claudeReviewSuccess || trackingStatus === 'complete') {
              console.log('üéâ Auto-approval criteria met!');
              core.setOutput('criteria_met', 'true');
              core.setOutput('claude_success', claudeReviewSuccess.toString());
              core.setOutput('tracking_complete', (trackingStatus === 'complete').toString());
              return { approved: true };
            } else {
              console.log('‚ùå Auto-approval criteria not met');
              core.setOutput('criteria_met', 'false');
              core.setOutput('reason', 'Claude review failed and tracking incomplete');
              return { approved: false };
            }

      - name: Auto-Approve PR
        if: steps.check-criteria.outputs.criteria_met == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const claudeSuccess = '${{ steps.check-criteria.outputs.claude_success }}' === 'true';
            const trackingComplete = '${{ steps.check-criteria.outputs.tracking_complete }}' === 'true';
            
            let approvalBody = `## ü§ñ BlazeCommerce Claude AI Auto-Approval
            
            ‚úÖ **Auto-approval criteria have been met**
            
            ### üìä Approval Basis
            `;
            
            if (claudeSuccess) {
              approvalBody += `- ‚úÖ Claude AI review completed successfully using official action\n`;
            }
            if (trackingComplete) {
              approvalBody += `- ‚úÖ All recommendations from tracking file implemented\n`;
            }
            
            approvalBody += `- ‚úÖ All GitHub Actions checks passed
            
            ### üéØ Quality Assurance
            This PR has been automatically approved based on:
            - Successful automated code review analysis
            - Compliance with BlazeCommerce coding standards
            - Passing all continuous integration checks
            
            ### üîß Technical Details
            - **Authentication Method**: Official Anthropic GitHub Action
            - **Approval Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC
            - **Review System**: BlazeCommerce Claude AI Review Bot v3.0
            
            *This approval demonstrates that all quality gates have been satisfied.*`;

            try {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
                body: approvalBody
              });
              
              console.log('‚úÖ PR auto-approved successfully');
            } catch (error) {
              console.log(`‚ùå Failed to auto-approve: ${error.message}`);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ‚ö†Ô∏è Auto-Approval Failed
                
                Criteria were met but approval action failed: ${error.message}
                
                **Manual approval required.**`
              });
            }
