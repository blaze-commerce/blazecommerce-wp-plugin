name: "🤖 Priority 1: Claude AI Code Review"

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review (optional - auto-detected for pull_request events)'
        required: false

# Prevent race conditions between concurrent workflow runs
concurrency:
  group: claude-review-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Changed to false to ensure completion

jobs:
  claude-review:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Debug Workflow Trigger
        run: |
          echo "🔍 DEBUG: Workflow triggered successfully!"
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.head_ref }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"

      - name: Validate Organization
        run: |
          if [[ "${{ github.repository_owner }}" != "blaze-commerce" ]]; then
            echo "❌ This workflow is only for blaze-commerce repositories"
            exit 1
          fi
          echo "✅ Organization validation passed"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Repository Type
        id: repo-context
        run: |
          if [[ -f "package.json" && -d "src" ]]; then
            echo "repo_type=nextjs-frontend" >> $GITHUB_OUTPUT
            echo "🎯 Detected: Next.js Frontend Repository"
          elif [[ -f "blaze-wooless.php" || -f "*.php" ]]; then
            echo "repo_type=wordpress-plugin" >> $GITHUB_OUTPUT
            echo "🎯 Detected: WordPress Plugin Repository"
          elif [[ -f "style.css" && -f "functions.php" ]]; then
            echo "repo_type=wordpress-child-theme" >> $GITHUB_OUTPUT
            echo "🎯 Detected: WordPress Child Theme Repository"
          else
            echo "repo_type=general" >> $GITHUB_OUTPUT
            echo "🎯 Detected: General Repository"
          fi

      - name: Prepare BlazeCommerce Context
        id: prepare-context
        uses: actions/github-script@v7
        with:
          script: |
            const repoType = '${{ steps.repo-context.outputs.repo_type }}';

            // Repository-specific prompts for BlazeCommerce standards
            const prompts = {
              'nextjs-frontend': `You are reviewing a Next.js/React frontend for BlazeCommerce e-commerce platform.

                Focus on:
                - React component patterns and hooks usage
                - TypeScript type safety and interface design
                - Performance optimization (Core Web Vitals)
                - SEO best practices and meta tag management
                - E-commerce UX patterns and accessibility
                - State management and data fetching patterns
                - Component reusability and maintainability
                - Error boundaries and loading states
                - Mobile responsiveness and cross-browser compatibility
                - Bundle size optimization and code splitting

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.`,

              'wordpress-plugin': `You are reviewing a WordPress plugin for BlazeCommerce e-commerce platform.

                Focus on:
                - WordPress coding standards and best practices
                - Security considerations (sanitization, validation, nonces)
                - Database operations and query optimization
                - Hook usage and action/filter implementation
                - Plugin architecture and modularity
                - Compatibility with different WordPress versions
                - Performance impact on WordPress sites
                - Proper enqueuing of scripts and styles
                - Internationalization and localization
                - Error handling and logging
                - Admin interface and user experience
                - REST API implementation and security
                - WooCommerce integration best practices

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.`,

              'wordpress-child-theme': `You are reviewing a WordPress child theme for BlazeCommerce e-commerce platform.

                Focus on:
                - Theme hierarchy and WordPress standards
                - CSS organization and maintainability
                - Responsive design and mobile optimization
                - Cross-browser compatibility
                - Performance optimization (CSS/JS)
                - Accessibility compliance (WCAG guidelines)
                - SEO optimization
                - Theme customization best practices
                - PHP template structure and security
                - Asset optimization and loading

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.`,

              'general': `You are reviewing code for BlazeCommerce platform.

                Focus on:
                - Code quality and maintainability
                - Security best practices
                - Performance optimization
                - Error handling and logging
                - Documentation and comments
                - Testing considerations

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.`
            };

            const reviewPrompt = prompts[repoType] || prompts['general'];
            core.setOutput('review_prompt', reviewPrompt);
            core.setOutput('repo_type', repoType);

            console.log(`🎯 Repository Type: ${repoType}`);
            console.log(`📝 Using ${repoType} specific prompt for Claude AI review`);

      - name: Claude AI Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Parse Claude Review and Update Tracking
        id: parse-review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Create tracking directory if it doesn't exist
            const trackingDir = '.github/claude-tracking';
            if (!fs.existsSync(trackingDir)) {
              fs.mkdirSync(trackingDir, { recursive: true });
            }

            // Parse Claude's review for REQUIRED and IMPORTANT items
            const claudeOutput = `${{ steps.claude-review.outputs.response || '' }}`;
            const requiredItems = [];
            const importantItems = [];

            if (claudeOutput) {
              const lines = claudeOutput.split('\n');
              for (const line of lines) {
                if (line.includes('🔴 REQUIRED')) {
                  requiredItems.push(line.trim());
                } else if (line.includes('🟡 IMPORTANT')) {
                  importantItems.push(line.trim());
                }
              }
            }

            // Save tracking data
            const trackingFile = path.join(trackingDir, `pr-${context.payload.pull_request.number}-recommendations.json`);
            const trackingData = {
              pr_number: context.payload.pull_request.number,
              created_at: new Date().toISOString(),
              repo_type: '${{ steps.prepare-context.outputs.repo_type }}',
              total_recommendations: {
                required: requiredItems.length,
                important: importantItems.length
              },
              resolved_recommendations: {
                required: [],
                important: []
              },
              recommendations: {
                required: requiredItems,
                important: importantItems
              }
            };

            fs.writeFileSync(trackingFile, JSON.stringify(trackingData, null, 2));

            core.setOutput('required_count', requiredItems.length);
            core.setOutput('important_count', importantItems.length);
            core.setOutput('has_blocking_issues', requiredItems.length > 0 ? 'true' : 'false');

            console.log(`📊 Found ${requiredItems.length} REQUIRED and ${importantItems.length} IMPORTANT items`);

  auto-approval:
    needs: claude-review
    if: always() && needs.claude-review.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: read
      pull-requests: write
      checks: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Auto-Approval Criteria
        id: check-criteria
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Check if tracking file exists
            const trackingFile = path.join('.github/claude-tracking', `pr-${context.payload.pull_request.number}-recommendations.json`);
            let hasBlockingIssues = false;

            if (fs.existsSync(trackingFile)) {
              const trackingData = JSON.parse(fs.readFileSync(trackingFile, 'utf8'));
              const unresolvedRequired = trackingData.total_recommendations.required - trackingData.resolved_recommendations.required.length;
              hasBlockingIssues = unresolvedRequired > 0;

              console.log(`📋 Tracking data: ${unresolvedRequired} unresolved REQUIRED items`);
            } else {
              // Fallback: check if Claude review had blocking issues
              hasBlockingIssues = '${{ needs.claude-review.outputs.has_blocking_issues }}' === 'true';
              console.log(`📋 No tracking file, using Claude output: blocking=${hasBlockingIssues}`);
            }

            // Check if all GitHub checks are passing
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });

            const failedChecks = checkRuns.check_runs.filter(check =>
              check.status === 'completed' && check.conclusion !== 'success' && check.conclusion !== 'skipped'
            );

            const shouldApprove = !hasBlockingIssues && failedChecks.length === 0;

            core.setOutput('should_approve', shouldApprove ? 'true' : 'false');
            core.setOutput('blocking_issues', hasBlockingIssues ? 'true' : 'false');
            core.setOutput('failed_checks', failedChecks.length.toString());

            console.log(`🎯 Auto-approval decision: ${shouldApprove ? 'APPROVE' : 'SKIP'}`);
            console.log(`   - Blocking issues: ${hasBlockingIssues}`);
            console.log(`   - Failed checks: ${failedChecks.length}`);

      - name: Auto-Approve PR
        if: steps.check-criteria.outputs.should_approve == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN || github.token }}
          script: |
            console.log('🎉 Creating approval review - all criteria met');

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE',
              body: `## ✅ BlazeCommerce Claude AI Review - Auto-Approved

🤖 **Automated approval** - All quality gates passed:
- ✅ No blocking (🔴 REQUIRED) issues found
- ✅ All GitHub checks passing
- ✅ Code meets BlazeCommerce standards for ${{ needs.claude-review.outputs.repo_type }}

*This PR has been automatically approved by the BlazeCommerce Claude AI Review Bot.*`
            });

            console.log('✅ PR approved successfully');

      - name: Post Skip Reason
        if: steps.check-criteria.outputs.should_approve == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const blockingIssues = steps.check-criteria.outputs.blocking_issues === 'true';
            const failedChecks = parseInt(steps.check-criteria.outputs.failed_checks);

            let skipReason = '## ⏳ BlazeCommerce Claude AI Review - Approval Pending\n\n';

            if (blockingIssues) {
              skipReason += '❌ **Blocking Issues Found**: This PR has 🔴 REQUIRED recommendations that must be addressed before approval.\n\n';
            }

            if (failedChecks > 0) {
              skipReason += `❌ **Failed Checks**: ${failedChecks} GitHub check(s) are failing and must pass before approval.\n\n`;
            }

            skipReason += '*Address the issues above and the bot will automatically approve when criteria are met.*';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: skipReason
            });

            console.log('📝 Posted skip reason comment');
