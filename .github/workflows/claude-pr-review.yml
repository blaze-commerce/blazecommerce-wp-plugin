name: BlazeCommerce Claude AI Review Bot (Official Action Only)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ["*"]
    types: [completed]

# Prevent race conditions between concurrent workflow runs
concurrency:
  group: claude-review-${{ github.event.pull_request.number || github.event.workflow_run.pull_requests[0].number }}
  cancel-in-progress: false

jobs:
  claude-review-official:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reduced timeout since official action is more reliable

    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: read
      id-token: write  # Required for anthropics/claude-code-action OIDC token

    steps:
      - name: Validate Organization
        run: |
          if [[ "${{ github.repository_owner }}" != "blaze-commerce" ]]; then
            echo "❌ This workflow is only for blaze-commerce repositories"
            exit 1
          fi
          echo "✅ Organization validation passed"

      - name: Check if PR Already Approved and Skip if Minimal Changes
        id: skip-check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              // Check if PR is already approved
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
              const isApproved = approvedReviews.length > 0;

              console.log(`PR approval status: ${isApproved ? 'APPROVED' : 'NOT APPROVED'}`);

              if (isApproved) {
                // Check if recent changes are only workflow/config files
                const { data: files } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                });

                const recentCommits = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  per_page: 5
                });

                // Get the latest commit
                const latestCommit = recentCommits.data[recentCommits.data.length - 1];
                const commitMessage = latestCommit.commit.message.toLowerCase();

                // Check if this is a workflow/config fix
                const isWorkflowFix = commitMessage.includes('workflow') ||
                                    commitMessage.includes('fix:') ||
                                    commitMessage.includes('claude') ||
                                    files.some(file => file.filename.startsWith('.github/workflows/'));

                if (isWorkflowFix) {
                  console.log('🔄 Detected workflow/config fix on approved PR - skipping review');
                  core.setOutput('should_skip', 'true');
                  core.setOutput('skip_reason', 'workflow_fix_on_approved_pr');
                  return;
                }
              }

              console.log('✅ Proceeding with normal review process');
              core.setOutput('should_skip', 'false');
            } catch (error) {
              console.log(`⚠️ Error checking PR status: ${error.message}`);
              console.log('✅ Proceeding with normal review process due to error');
              core.setOutput('should_skip', 'false');
            }

      - name: Post Skip Notification
        if: steps.skip-check.outputs.should_skip == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const skipReason = '${{ steps.skip-check.outputs.skip_reason }}';

            const skipMessage = `## 🔄 Claude AI Review Skipped

            **Reason**: Workflow/configuration fix detected on already approved PR

            ### ✅ Status
            - PR is already approved by reviewers
            - Recent changes appear to be workflow/configuration fixes
            - Skipping redundant review to avoid unnecessary processing

            ### 🎯 Next Steps
            - PR can be merged when ready
            - If substantial code changes are made, the review will automatically trigger

            *BlazeCommerce Claude AI Review Bot v3.0 - Smart Skip Logic*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: skipMessage
            });

      - name: Checkout Repository
        if: steps.skip-check.outputs.should_skip != 'true'
        uses: actions/checkout@v4

      - name: Determine Repository Type
        if: steps.skip-check.outputs.should_skip != 'true'
        id: repo-context
        run: |
          repo_name="${{ github.repository }}"

          if [[ "$repo_name" == *"frontend"* ]]; then
            echo "repo_type=nextjs-frontend" >> $GITHUB_OUTPUT
            echo "🎯 Repository type: Next.js Frontend"
          elif [[ "$repo_name" == *"wp-plugin"* ]] || [[ "$repo_name" == *"plugin"* ]]; then
            echo "repo_type=wordpress-plugin" >> $GITHUB_OUTPUT
            echo "🎯 Repository type: WordPress Plugin"
          elif [[ "$repo_name" == *"child"* ]] || [[ "$repo_name" == *"theme"* ]]; then
            echo "repo_type=wordpress-child-theme" >> $GITHUB_OUTPUT
            echo "🎯 Repository type: WordPress Child Theme"
          else
            echo "repo_type=general" >> $GITHUB_OUTPUT
            echo "🎯 Repository type: General"
          fi

      - name: Prepare BlazeCommerce Context
        if: steps.skip-check.outputs.should_skip != 'true'
        id: prepare-context
        uses: actions/github-script@v7
        with:
          script: |
            const repoType = '${{ steps.repo-context.outputs.repo_type }}';

            // Repository-specific prompts for BlazeCommerce standards
            const prompts = {
              'nextjs-frontend': `
                You are reviewing a Next.js/React frontend for BlazeCommerce e-commerce platform.

                Focus on:
                - React component patterns and hooks usage
                - TypeScript type safety and interface design
                - Performance optimization (Core Web Vitals)
                - SEO best practices and meta tag management
                - E-commerce UX patterns and accessibility
                - State management and data fetching patterns
                - Component reusability and maintainability
                - Error boundaries and loading states
                - Mobile responsiveness and cross-browser compatibility
                - Bundle size optimization and code splitting

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'wordpress-plugin': `
                You are reviewing a WordPress plugin for BlazeCommerce e-commerce platform.

                Focus on:
                - WordPress coding standards and best practices
                - Security considerations (sanitization, validation, nonces)
                - Database operations and query optimization
                - Hook usage and action/filter implementation
                - Plugin architecture and modularity
                - Compatibility with different WordPress versions
                - Performance impact on WordPress sites
                - Proper enqueuing of scripts and styles
                - Internationalization and localization
                - Error handling and logging
                - Admin interface and user experience
                - REST API implementation and security
                - WooCommerce integration best practices

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'wordpress-child-theme': `
                You are reviewing a WordPress child theme for BlazeCommerce e-commerce platform.

                Focus on:
                - Theme hierarchy and WordPress standards
                - CSS organization and maintainability
                - Responsive design and mobile optimization
                - Cross-browser compatibility
                - Performance optimization (CSS/JS)
                - Accessibility compliance (WCAG guidelines)
                - SEO optimization
                - Theme customization best practices
                - PHP template structure and security
                - Asset optimization and loading

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `,
              'general': `
                You are reviewing code for BlazeCommerce platform.

                Focus on:
                - Code quality and best practices
                - Potential bugs or issues
                - Performance considerations
                - Security concerns
                - Test coverage and quality
                - Documentation completeness
                - Error handling and edge cases
                - Code maintainability and readability

                Provide categorized feedback:
                🔴 REQUIRED - Critical issues that must be fixed
                🟡 IMPORTANT - Significant improvements needed
                🔵 SUGGESTIONS - Optional enhancements

                Focus on actionable feedback that helps improve code quality, security, and maintainability.
              `
            };

            const selectedPrompt = prompts[repoType] || prompts['general'];

            // Add PR context
            const prContext = `

            ## Pull Request Context
            - Repository: ${context.repo.owner}/${context.repo.repo}
            - PR #${context.issue.number}: ${context.payload.pull_request?.title || 'N/A'}
            - Author: ${context.payload.pull_request?.user?.login || 'N/A'}
            - Type: ${repoType}

            Please provide a comprehensive code review with specific, actionable recommendations.
            `;

            const fullPrompt = selectedPrompt + prContext;

            // Set output for official action
            core.setOutput('review_prompt', fullPrompt);
            core.setOutput('repo_type', repoType);

            console.log(`✅ BlazeCommerce context prepared for ${repoType} repository`);

      - name: Claude AI Review (Official Action - Attempt 1)
        if: steps.skip-check.outputs.should_skip != 'true'
        id: claude-review-1
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Wait Before Retry (30s)
        if: steps.skip-check.outputs.should_skip != 'true' && steps.claude-review-1.outcome == 'failure'
        run: |
          echo "⏳ Waiting 30s before retry..."
          sleep 30

      - name: Claude AI Review (Official Action - Attempt 2)
        id: claude-review-2
        if: steps.skip-check.outputs.should_skip != 'true' && steps.claude-review-1.outcome == 'failure'
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Wait Before Final Retry (60s)
        if: steps.skip-check.outputs.should_skip != 'true' && steps.claude-review-1.outcome == 'failure' && steps.claude-review-2.outcome == 'failure'
        run: |
          echo "⏳ Waiting 60s before final retry..."
          sleep 60

      - name: Claude AI Review (Official Action - Attempt 3)
        id: claude-review-3
        if: steps.skip-check.outputs.should_skip != 'true' && steps.claude-review-1.outcome == 'failure' && steps.claude-review-2.outcome == 'failure'
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ steps.prepare-context.outputs.review_prompt }}

      - name: Determine Review Success
        if: steps.skip-check.outputs.should_skip != 'true'
        id: review-status
        uses: actions/github-script@v7
        with:
          script: |
            const attempt1 = '${{ steps.claude-review-1.outcome }}';
            const attempt2 = '${{ steps.claude-review-2.outcome }}';
            const attempt3 = '${{ steps.claude-review-3.outcome }}';

            if (attempt1 === 'success') {
              console.log('✅ Claude AI review completed successfully on attempt 1');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '1');
            } else if (attempt2 === 'success') {
              console.log('✅ Claude AI review completed successfully on attempt 2');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '2');
            } else if (attempt3 === 'success') {
              console.log('✅ Claude AI review completed successfully on attempt 3');
              core.setOutput('success', 'true');
              core.setOutput('attempt', '3');
            } else {
              console.log('❌ All Claude AI review attempts failed');
              core.setOutput('success', 'false');
              core.setOutput('error', 'All attempts failed after 3 retries');
            }

      - name: Post BlazeCommerce Summary
        if: steps.skip-check.outputs.should_skip != 'true' && steps.review-status.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const repoType = '${{ steps.prepare-context.outputs.repo_type }}';
            const attempt = '${{ steps.review-status.outputs.attempt }}';

            const summaryComment = `## 🤖 BlazeCommerce Claude AI Review Summary

            ✅ **Review completed successfully using official Anthropic action**

            ### 📊 Review Details
            - **Repository Type**: ${repoType}
            - **Completed on Attempt**: ${attempt}
            - **Review Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC
            - **Authentication**: Official Anthropic GitHub Action (resilient)

            ### 🎯 BlazeCommerce Standards Applied
            This review follows BlazeCommerce-specific standards for ${repoType} repositories, including:
            - Security best practices and vulnerability assessment
            - Performance optimization guidelines and recommendations
            - Code quality standards and maintainability patterns
            - E-commerce integration patterns and user experience

            The detailed technical review has been posted above by \`claude[bot]\`.

            *Powered by BlazeCommerce Claude AI Review Bot v3.0 - Official Action Only*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summaryComment
            });

      - name: Handle Review Failure
        if: steps.skip-check.outputs.should_skip != 'true' && steps.review-status.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const errorComment = `## ⚠️ BlazeCommerce Claude AI Review Failed

            The automated code review failed after 3 attempts using the official Anthropic action.

            ### 🔍 Possible Causes
            - Temporary API service overload (Error 529)
            - Network connectivity issues
            - Large PR size exceeding processing limits

            ### 🛠️ Next Steps
            1. **Wait and Retry**: Push a new commit to trigger another review attempt
            2. **Manual Review**: Request manual code review from team members
            3. **Service Status**: Check [Anthropic Status](https://status.anthropic.com/) for service updates

            ### 📊 Attempt Details
            - **All 3 attempts failed** using official Anthropic GitHub Action
            - **Authentication**: Using official action (most reliable method)
            - **Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC

            *BlazeCommerce Claude AI Review Bot v3.0 - Official Action Only*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: errorComment
            });

  auto-approve:
    needs: claude-review-official
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: read
      pull-requests: write
      checks: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Auto-Approval Criteria
        id: check-criteria
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            console.log('🔍 Checking auto-approval criteria...');

            // Helper function to parse Claude review comments for recommendations
            async function parseClaudeReviewComments(github, context) {
              const requiredItems = [];
              const importantItems = [];

              try {
                console.log('🔍 Parsing Claude review comments for recommendations...');

                // Get PR comments with pagination support
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  per_page: 100
                });

                console.log(`Found ${comments.data.length} comments on PR`);

                // Find Claude bot comment with enhanced detection
                const claudeComment = comments.data.find(comment => {
                  const isClaudeBot = comment.user.login === 'claude[bot]' ||
                                     comment.user.type === 'Bot' ||
                                     comment.user.login.includes('claude');
                  const hasReviewContent = comment.body && (
                    comment.body.includes('Code Review') ||
                    comment.body.includes('🔴') ||
                    comment.body.includes('🟡') ||
                    comment.body.includes('REQUIRED') ||
                    comment.body.includes('IMPORTANT')
                  );
                  return isClaudeBot && hasReviewContent;
                });

                if (claudeComment) {
                  console.log('✅ Found Claude bot review comment');
                  let commentBody = claudeComment.body;

                  // Input validation and sanitization
                  if (!commentBody || typeof commentBody !== 'string') {
                    console.log('⚠️ Invalid comment body format');
                    return { requiredItems, importantItems };
                  }

                  // Limit content size to prevent performance issues
                  const MAX_CONTENT_SIZE = 50000; // 50KB limit
                  if (commentBody.length > MAX_CONTENT_SIZE) {
                    console.log(`⚠️ Comment body too large (${commentBody.length} chars), truncating to ${MAX_CONTENT_SIZE}`);
                    commentBody = commentBody.substring(0, MAX_CONTENT_SIZE);
                  }

                  // Sanitize content - remove potential script injections
                  commentBody = commentBody.replace(/<script[^>]*>.*?<\/script>/gi, '')
                                          .replace(/javascript:/gi, '')
                                          .replace(/on\w+\s*=/gi, '');

                  // Enhanced regex patterns with proper escaping and validation
                  // Look for 🔴 REQUIRED sections with more specific patterns
                  const requiredPattern = /🔴\s*(?:.*?)?REQUIRED[\s\S]*?(?=🟡\s*(?:.*?)?(?:IMPORTANT|SUGGESTIONS)|🔵\s*SUGGESTIONS|$)/gi;
                  const requiredMatches = commentBody.match(requiredPattern) || [];

                  // Look for 🟡 IMPORTANT sections with more specific patterns
                  const importantPattern = /🟡\s*(?:.*?)?IMPORTANT[\s\S]*?(?=🔴\s*(?:.*?)?REQUIRED|🔵\s*SUGGESTIONS|$)/gi;
                  const importantMatches = commentBody.match(importantPattern) || [];

                  // Process and sanitize matches
                  requiredItems.push(...requiredMatches.map(match => {
                    return match.trim().substring(0, 1000); // Limit individual item size
                  }));

                  importantItems.push(...importantMatches.map(match => {
                    return match.trim().substring(0, 1000); // Limit individual item size
                  }));

                  console.log(`Found ${requiredItems.length} REQUIRED recommendations in Claude comments`);
                  console.log(`Found ${importantItems.length} IMPORTANT recommendations in Claude comments`);

                  // Log first few characters of each item for debugging (without sensitive content)
                  requiredItems.forEach((item, index) => {
                    console.log(`REQUIRED ${index + 1}: ${item.substring(0, 100)}...`);
                  });
                  importantItems.forEach((item, index) => {
                    console.log(`IMPORTANT ${index + 1}: ${item.substring(0, 100)}...`);
                  });

                } else {
                  console.log('⚠️ No Claude bot review comment found');
                }
              } catch (error) {
                // Enhanced error handling with specific error types
                if (error.name === 'HttpError' && error.status === 403) {
                  console.error('❌ API access denied - check token permissions');
                } else if (error.name === 'HttpError' && error.status === 404) {
                  console.error('❌ PR or comments not found');
                } else if (error.name === 'RequestError') {
                  console.error('❌ Network error accessing GitHub API');
                } else {
                  console.error(`❌ Critical error parsing Claude comments: ${error.message}`);
                }

                // Don't throw - return empty arrays to allow workflow to continue
                console.log('⚠️ Continuing with empty recommendation lists due to parsing error');
              }

              return { requiredItems, importantItems };
            }

            // Step 1: Check if Claude review succeeded
            const claudeReviewSuccess = '${{ needs.claude-review-official.outputs.success }}' === 'true';
            console.log(`Claude Review Success: ${claudeReviewSuccess}`);

            // Step 2: Check GitHub Actions status
            try {
              const checkRuns = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request?.head?.sha
              });

              const failedChecks = checkRuns.data.check_runs.filter(check =>
                check.conclusion === 'failure' || check.conclusion === 'cancelled'
              );

              if (failedChecks.length > 0) {
                console.log(`❌ Found ${failedChecks.length} failed checks - auto-approval blocked`);
                core.setOutput('action_type', 'skip_approval');
                core.setOutput('reason', 'Failed GitHub Actions checks');
                core.setOutput('failed_checks_count', failedChecks.length.toString());
                return { action: 'skip_approval', reason: 'Failed checks' };
              }
            } catch (error) {
              console.log(`⚠️ Could not check GitHub Actions status: ${error.message}`);
            }

            // Step 3: Enhanced tracking file analysis with REQUIRED recommendation checking
            const trackingFile = '.github/CLAUDE_REVIEW_TRACKING.md';
            let trackingStatus = 'not-found';
            let requiredRecommendationsStatus = { allAddressed: true, pendingItems: [] };
            let importantRecommendationsStatus = { allAddressed: true, pendingItems: [] };

            try {
              if (!fs.existsSync(trackingFile)) {
                console.log('⚠️ Tracking file not found - parsing Claude review comments directly');

                // Parse Claude review comments for recommendations
                const { requiredItems, importantItems } = await parseClaudeReviewComments(github, context);

                if (requiredItems.length > 0) {
                  requiredRecommendationsStatus.allAddressed = false;
                  requiredRecommendationsStatus.pendingItems = requiredItems;
                  console.log(`❌ Found ${requiredItems.length} unaddressed REQUIRED recommendations in Claude comments`);
                }

                if (importantItems.length > 0) {
                  importantRecommendationsStatus.allAddressed = false;
                  importantRecommendationsStatus.pendingItems = importantItems;
                  console.log(`❌ Found ${importantItems.length} unaddressed IMPORTANT recommendations in Claude comments`);
                }

                trackingStatus = 'parsed-from-comments';
                console.log(`✅ Successfully parsed recommendations from Claude comments`);
              }

              const trackingContent = fs.readFileSync(trackingFile, 'utf8');
              console.log('📄 Tracking file found, analyzing content...');

              // Check for overall completion indicators
              if (trackingContent.includes('All critical and important recommendations implemented') ||
                  trackingContent.includes('Implementation Rate: 100%') ||
                  trackingContent.includes('Status: All Claude AI bot recommendations successfully implemented')) {
                trackingStatus = 'complete';
                console.log('✅ Tracking file indicates complete implementation');
              } else {
                trackingStatus = 'incomplete';
                console.log('⚠️ Tracking file indicates incomplete implementation, checking specific recommendations...');

                // Enhanced parsing: Check REQUIRED recommendations status
                const requiredPattern = /🔴.*REQUIRED.*\(([^)]+)\)/g;
                const requiredMatches = [...trackingContent.matchAll(requiredPattern)];

                console.log(`Found ${requiredMatches.length} REQUIRED recommendation(s)`);

                for (const match of requiredMatches) {
                  const status = match[1];
                  const fullMatch = match[0];
                  console.log(`Checking REQUIRED item: ${fullMatch.substring(0, 100)}...`);
                  console.log(`Status: ${status}`);

                  if (!status.includes('✅') && !status.includes('All Fixed') && !status.includes('Completed')) {
                    requiredRecommendationsStatus.allAddressed = false;
                    requiredRecommendationsStatus.pendingItems.push(fullMatch);
                    console.log(`❌ REQUIRED item not addressed: ${fullMatch.substring(0, 80)}...`);
                  } else {
                    console.log(`✅ REQUIRED item addressed: ${fullMatch.substring(0, 80)}...`);
                  }
                }

                // Check IMPORTANT recommendations status
                const importantPattern = /🟡.*IMPORTANT.*\(([^)]+)\)/g;
                const importantMatches = [...trackingContent.matchAll(importantPattern)];

                console.log(`Found ${importantMatches.length} IMPORTANT recommendation(s)`);

                for (const match of importantMatches) {
                  const status = match[1];
                  const fullMatch = match[0];
                  console.log(`Checking IMPORTANT item: ${fullMatch.substring(0, 100)}...`);
                  console.log(`Status: ${status}`);

                  if (!status.includes('✅') && !status.includes('All Fixed') && !status.includes('Completed')) {
                    importantRecommendationsStatus.allAddressed = false;
                    importantRecommendationsStatus.pendingItems.push(fullMatch);
                    console.log(`❌ IMPORTANT item not addressed: ${fullMatch.substring(0, 80)}...`);
                  } else {
                    console.log(`✅ IMPORTANT item addressed: ${fullMatch.substring(0, 80)}...`);
                  }
                }
              }
            } catch (error) {
              console.log(`⚠️ Error reading tracking file: ${error.message}`);
              trackingStatus = 'error';
            }

            console.log(`Tracking file status: ${trackingStatus}`);
            console.log(`REQUIRED recommendations all addressed: ${requiredRecommendationsStatus.allAddressed}`);
            console.log(`IMPORTANT recommendations all addressed: ${importantRecommendationsStatus.allAddressed}`);

            // Decision logic with enhanced criteria checking
            if (!requiredRecommendationsStatus.allAddressed) {
              console.log(`❌ REQUIRED recommendations not fully addressed - creating disapproval review`);
              console.log(`Pending REQUIRED items: ${requiredRecommendationsStatus.pendingItems.length}`);
              core.setOutput('action_type', 'disapprove');
              core.setOutput('reason', 'REQUIRED recommendations pending');
              core.setOutput('pending_required_count', requiredRecommendationsStatus.pendingItems.length.toString());
              core.setOutput('pending_required_items', JSON.stringify(requiredRecommendationsStatus.pendingItems));
              return { action: 'disapprove', reason: 'Required items pending', pendingItems: requiredRecommendationsStatus.pendingItems };
            }

            if (!importantRecommendationsStatus.allAddressed) {
              console.log(`❌ IMPORTANT recommendations not fully addressed - auto-approval blocked`);
              console.log(`Pending IMPORTANT items: ${importantRecommendationsStatus.pendingItems.length}`);
              core.setOutput('action_type', 'skip_approval');
              core.setOutput('reason', 'IMPORTANT recommendations pending');
              core.setOutput('pending_important_count', importantRecommendationsStatus.pendingItems.length.toString());
              core.setOutput('pending_important_items', JSON.stringify(importantRecommendationsStatus.pendingItems));
              return { action: 'skip_approval', reason: 'Important items pending', pendingItems: importantRecommendationsStatus.pendingItems };
            }

            // Enhanced audit logging for security and compliance
            const auditLog = {
              timestamp: new Date().toISOString(),
              pr_number: context.payload.pull_request?.number,
              actor: context.actor,
              event: context.eventName,
              claude_review_success: claudeReviewSuccess,
              required_addressed: requiredRecommendationsStatus.allAddressed,
              important_addressed: importantRecommendationsStatus.allAddressed,
              required_count: requiredRecommendationsStatus.pendingItems.length,
              important_count: importantRecommendationsStatus.pendingItems.length,
              tracking_status: trackingStatus
            };
            console.log('📊 AUDIT LOG:', JSON.stringify(auditLog, null, 2));

            // Auto-approve ONLY if Claude review succeeded AND all recommendations addressed
            if (claudeReviewSuccess &&
                requiredRecommendationsStatus.allAddressed &&
                importantRecommendationsStatus.allAddressed) {
              console.log('🎉 Auto-approval criteria met: Claude review succeeded AND all recommendations addressed!');
              console.log(`📋 APPROVAL DECISION: PR #${context.payload.pull_request?.number} approved by ${context.actor} at ${new Date().toISOString()}`);

              core.setOutput('action_type', 'approve');
              core.setOutput('claude_success', claudeReviewSuccess.toString());
              core.setOutput('tracking_complete', (trackingStatus === 'complete').toString());
              core.setOutput('all_required_addressed', requiredRecommendationsStatus.allAddressed.toString());
              core.setOutput('all_important_addressed', importantRecommendationsStatus.allAddressed.toString());

              let approvalBasis = [];
              if (claudeReviewSuccess) approvalBasis.push('claude_success');
              if (requiredRecommendationsStatus.allAddressed && importantRecommendationsStatus.allAddressed) approvalBasis.push('recommendations_addressed');
              core.setOutput('approval_basis', approvalBasis.join(','));

              return { action: 'approve', reason: 'Claude review succeeded and all recommendations addressed' };
            } else {
              console.log('❌ Auto-approval criteria not met - Claude review must succeed AND all recommendations must be addressed');

              let failureReasons = [];
              if (!claudeReviewSuccess) failureReasons.push('Claude review failed');
              if (!requiredRecommendationsStatus.allAddressed) failureReasons.push('REQUIRED recommendations pending');
              if (!importantRecommendationsStatus.allAddressed) failureReasons.push('IMPORTANT recommendations pending');

              const reason = failureReasons.join(', ');
              console.log(`📋 REJECTION DECISION: PR #${context.payload.pull_request?.number} rejected by auto-approval system at ${new Date().toISOString()}`);
              console.log(`📋 REJECTION REASONS: ${reason}`);

              core.setOutput('action_type', 'skip_approval');
              core.setOutput('reason', reason);
              return { action: 'skip_approval', reason: reason };
            }

      - name: Create Disapproval Review
        if: steps.check-criteria.outputs.action_type == 'disapprove'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          script: |
            console.log('🚫 Creating disapproval review for unaddressed REQUIRED recommendations...');

            const pendingRequiredItems = JSON.parse('${{ steps.check-criteria.outputs.pending_required_items }}');
            const pendingCount = '${{ steps.check-criteria.outputs.pending_required_count }}';

            let disapprovalBody = `## ❌ Auto-Approval Blocked - REQUIRED Changes Not Addressed

            This PR cannot be approved because **${pendingCount} REQUIRED recommendation(s)** from Claude AI have not been addressed.

            ### 🔴 Pending REQUIRED Recommendations

            The following critical issues must be resolved before this PR can be approved:

            `;

            // Add each pending REQUIRED item with proper formatting
            pendingRequiredItems.forEach((item, index) => {
              // Extract the main recommendation text (remove status part)
              const cleanItem = item.replace(/\([^)]+\)$/, '').trim();
              disapprovalBody += `${index + 1}. ${cleanItem}\n`;
            });

            disapprovalBody += `
            ### 🛠️ Next Steps

            1. **Address each REQUIRED recommendation** listed above
            2. **Update the tracking file** (`.github/CLAUDE_REVIEW_TRACKING.md`) to mark items as completed with ✅
            3. **Push your changes** - the bot will automatically re-evaluate on the next commit
            4. **Verify completion** by ensuring all REQUIRED items show ✅ status in the tracking file

            ### 📋 Auto-Approval Criteria

            For automatic approval, **ALL** of the following must be met:
            - ✅ All GitHub Actions checks pass
            - ✅ **All REQUIRED recommendations are addressed** (currently failing)
            - ✅ All IMPORTANT recommendations are addressed
            - ✅ Claude AI review completes successfully

            ### 🔄 Automatic Re-evaluation

            This review will be automatically updated when you push new commits. The bot will re-check all criteria and approve automatically once ALL requirements are met (Claude review success AND all recommendations addressed).

            ---
            *BlazeCommerce Claude AI Review Bot v3.0 - Enhanced Auto-Approval with REQUIRED Recommendation Enforcement*`;

            try {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'REQUEST_CHANGES',
                body: disapprovalBody
              });

              console.log(`✅ Disapproval review created successfully for ${pendingCount} pending REQUIRED items`);
            } catch (error) {
              console.log(`❌ Failed to create disapproval review: ${error.message}`);

              // Fallback: Create a comment if review creation fails
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ⚠️ Disapproval Review Creation Failed

                **Error**: ${error.message}

                **Intended Action**: This PR should be disapproved due to ${pendingCount} unaddressed REQUIRED recommendations.

                **Manual Action Required**: Please review the REQUIRED recommendations in the tracking file and address them before approval.`
              });
            }

      - name: Auto-Approve PR
        if: steps.check-criteria.outputs.action_type == 'approve'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          script: |
            console.log('🎉 Creating approval review - all criteria met...');

            // Debug: Verify we're using the bot token
            const { data: currentUser } = await github.rest.users.getAuthenticated();
            console.log(`🔍 Authenticated as: ${currentUser.login}`);

            if (currentUser.login !== 'blazecommerce-claude-ai') {
              throw new Error(`❌ Wrong token! Expected blazecommerce-claude-ai, got ${currentUser.login}`);
            }

            const claudeSuccess = '${{ steps.check-criteria.outputs.claude_success }}' === 'true';
            const trackingComplete = '${{ steps.check-criteria.outputs.tracking_complete }}' === 'true';
            const allRequiredAddressed = '${{ steps.check-criteria.outputs.all_required_addressed }}' === 'true';
            const allImportantAddressed = '${{ steps.check-criteria.outputs.all_important_addressed }}' === 'true';
            const approvalBasis = '${{ steps.check-criteria.outputs.approval_basis }}';

            let approvalBody = `## 🤖 BlazeCommerce Claude AI Auto-Approval

            ✅ **All auto-approval criteria have been met**

            ### 📊 Approval Basis
            `;

            if (claudeSuccess) {
              approvalBody += `- ✅ Claude AI review completed successfully using official action\n`;
            }
            if (trackingComplete) {
              approvalBody += `- ✅ All recommendations from tracking file implemented\n`;
            }
            if (allRequiredAddressed && allImportantAddressed) {
              approvalBody += `- ✅ All REQUIRED and IMPORTANT recommendations addressed\n`;
            }

            approvalBody += `- ✅ All GitHub Actions checks passed

            ### 🎯 Enhanced Quality Assurance
            This PR has been automatically approved using **enhanced criteria validation**:
            - ✅ **REQUIRED Recommendations**: All critical issues resolved
            - ✅ **IMPORTANT Recommendations**: All significant improvements implemented
            - ✅ **Automated Code Review**: Successful analysis completion
            - ✅ **Continuous Integration**: All checks passed
            - ✅ **BlazeCommerce Standards**: Full compliance verified

            ### 🔧 Technical Details
            - **Authentication Method**: Official Anthropic GitHub Action
            - **Approval Timestamp**: ${new Date().toISOString().replace('T', ' ').substring(0, 19)} UTC
            - **Review System**: BlazeCommerce Claude AI Review Bot v3.0 (Enhanced)
            - **Criteria Basis**: ${approvalBasis}
            - **Validation Level**: REQUIRED + IMPORTANT recommendations

            *This approval demonstrates that all enhanced quality gates have been satisfied, including specific validation of Claude AI recommendations.*`;

            try {
              // First, check if we can access the PR
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              console.log(`📋 PR Details: #${pr.number} by ${pr.user.login}, state: ${pr.state}`);

              // Check if PR is from the same user as the bot
              if (pr.user.login === currentUser.login) {
                throw new Error('❌ Cannot approve own PR - GitHub security restriction');
              }

              // Attempt the approval
              // Try direct approval first
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'APPROVE',
                  body: approvalBody
                });
                console.log('✅ Direct approval successful');
              } catch (approvalError) {
                console.log('⚠️ Direct approval failed, trying alternative methods...');

                // Alternative 1: Create a positive review without approval
                try {
                  await github.rest.pulls.createReview({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    event: 'COMMENT',
                    body: `${approvalBody}

                    **Note**: Auto-approval was blocked by GitHub security restrictions. Manual approval required.`
                  });
                  console.log('✅ Created positive review comment instead');
                } catch (commentError) {
                  console.log('❌ Review comment also failed:', commentError.message);
                }

                // Alternative 2: Set a status check
                try {
                  await github.rest.repos.createCommitStatus({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    sha: pr.head.sha,
                    state: 'success',
                    context: 'claude-ai-bot/auto-approval-ready',
                    description: 'All criteria met - ready for manual approval'
                  });
                  console.log('✅ Set approval-ready status check');
                } catch (statusError) {
                  console.log('❌ Status check also failed:', statusError.message);
                }

                // Re-throw the original error for the outer catch block
                throw approvalError;
              }

              console.log('✅ PR auto-approved successfully with enhanced criteria validation');
            } catch (error) {
              console.log(`❌ Failed to auto-approve: ${error.message}`);
              console.log(`🔍 Error details:`, error);

              // Determine error type and provide specific guidance
              let errorGuidance = '';
              if (error.message.includes('Resource not accessible')) {
                errorGuidance = `
                ### 🔧 Possible Solutions:
                1. **Token Issue**: Verify BOT_GITHUB_TOKEN is from blazecommerce-claude-ai account
                2. **Permissions**: Ensure bot has 'Write' repository permissions
                3. **Organization Settings**: Check if org restricts automated approvals
                4. **Branch Protection**: Verify no conflicting protection rules
                `;
              } else if (error.message.includes('own PR')) {
                errorGuidance = `
                ### 🔧 Solution Required:
                The bot token appears to be associated with the PR author. Use a completely separate bot account.
                `;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ⚠️ Auto-Approval Failed

                **Enhanced criteria were met** but approval action failed: ${error.message}

                ### ✅ Verified Criteria
                - All REQUIRED recommendations addressed
                - All IMPORTANT recommendations addressed
                - All GitHub Actions checks passed

                ${errorGuidance}

                **Manual approval recommended** - all quality gates satisfied.`
              });
            }

      - name: Handle Skip Approval
        if: steps.check-criteria.outputs.action_type == 'skip_approval'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('⏳ Posting skip approval status comment...');

            const reason = '${{ steps.check-criteria.outputs.reason }}';
            const failedChecksCount = '${{ steps.check-criteria.outputs.failed_checks_count }}' || '0';
            const pendingRequiredCount = '${{ steps.check-criteria.outputs.pending_required_count }}' || '0';
            const pendingImportantCount = '${{ steps.check-criteria.outputs.pending_important_count }}' || '0';
            const pendingRequiredItems = '${{ steps.check-criteria.outputs.pending_required_items }}' || '[]';
            const pendingImportantItems = '${{ steps.check-criteria.outputs.pending_important_items }}' || '[]';
            const allRequiredAddressed = '${{ steps.check-criteria.outputs.all_required_addressed }}' === 'true';
            const allImportantAddressed = '${{ steps.check-criteria.outputs.all_important_addressed }}' === 'true';

            let statusBody = `## 🔍 Auto-Approval Status Check

            **Status**: ⏳ Criteria not yet met for auto-approval

            **Reason**: ${reason}

            `;

            // Add specific details based on the reason
            if (reason.includes('Failed GitHub Actions checks')) {
              statusBody += `### ❌ Failed Checks

              **${failedChecksCount} GitHub Actions check(s) failed**

              Please review the failed checks in the "Checks" tab and resolve any issues before auto-approval can proceed.

              `;
            }

            if (reason.includes('REQUIRED recommendations pending')) {
              statusBody += `### 🔴 Pending REQUIRED Recommendations

              **${pendingRequiredCount} REQUIRED recommendation(s) must be addressed**

              These are critical issues that must be fixed before the PR can be approved:

              `;

              try {
                const pendingItems = JSON.parse(pendingRequiredItems);
                pendingItems.forEach((item, index) => {
                  const cleanItem = item.replace(/\([^)]+\)$/, '').trim();
                  statusBody += `${index + 1}. ${cleanItem.substring(0, 300)}...\n`;
                });
              } catch (e) {
                statusBody += `Please check the Claude review comment for details.\n`;
              }

              statusBody += `\n`;
            }

            if (reason.includes('IMPORTANT recommendations pending')) {
              statusBody += `### 🟡 Pending IMPORTANT Recommendations

              **${pendingImportantCount} IMPORTANT recommendation(s) not yet addressed**

              While these don't block the PR entirely, addressing them is recommended for auto-approval:

              `;

              try {
                const pendingItems = JSON.parse(pendingImportantItems);
                pendingItems.forEach((item, index) => {
                  const cleanItem = item.replace(/\([^)]+\)$/, '').trim();
                  statusBody += `${index + 1}. ${cleanItem}\n`;
                });
              } catch (e) {
                statusBody += `Please check the tracking file for details.\n`;
              }

              statusBody += `\n`;
            }

            if (reason.includes('No tracking file')) {
              statusBody += `### 📄 Missing Tracking File

              No Claude AI review tracking file was found, and the Claude review did not complete successfully.

              **Next Steps**:
              1. Ensure Claude AI review completes successfully, OR
              2. Create a tracking file at \`.github/CLAUDE_REVIEW_TRACKING.md\` with recommendation status

              `;
            }

            statusBody += `### ✅ Auto-Approval Criteria

            For automatic approval, **ALL** of the following must be met:
            1. ✅ All GitHub Actions checks pass
            2. ✅ All REQUIRED recommendations are addressed (critical)
            3. ✅ All IMPORTANT recommendations are addressed (recommended)
            4. ✅ Claude AI review completes successfully

            **Note**: Auto-approval now requires Claude review success AND all recommendations addressed (no longer OR logic).

            ### 🔄 Automatic Re-evaluation

            The bot will automatically re-check these criteria on each commit. Once all criteria are met, the PR will be approved automatically.

            ### 📊 Current Status Summary
            - **Failed Checks**: ${failedChecksCount > 0 ? `❌ ${failedChecksCount} failed` : '✅ All passed'}
            - **REQUIRED Items**: ${pendingRequiredCount > 0 ? `❌ ${pendingRequiredCount} pending` : (allRequiredAddressed ? '✅ All addressed' : '⚠️ Status unknown')}
            - **IMPORTANT Items**: ${pendingImportantCount > 0 ? `⏳ ${pendingImportantCount} pending` : (allImportantAddressed ? '✅ All addressed' : '⚠️ Status unknown')}
            - **Claude Review**: ${'${{ needs.claude-review-official.outputs.success }}' === 'true' ? '✅ Completed' : '❌ Failed'}

            ---
            *BlazeCommerce Claude AI Review Bot v3.0 - Enhanced Auto-Approval with Detailed Status Tracking*`;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: statusBody
              });

              console.log(`✅ Skip approval status comment posted - Reason: ${reason}`);
            } catch (error) {
              console.log(`❌ Failed to post skip approval comment: ${error.message}`);
            }
