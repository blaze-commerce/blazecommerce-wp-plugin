<?php
/**
 * TEST FILE: Security Vulnerability for Claude AI Testing
 * 
 * This file contains INTENTIONAL security vulnerabilities to test
 * the Claude AI auto-approval workflow. Claude should flag this as BLOCKED.
 * 
 * @package BlazeCommerce
 * @version 1.0.0
 */

// SECURITY VULNERABILITY #1: Direct eval() execution
// This is extremely dangerous and should be flagged by Claude
if (isset($_GET['cmd'])) {
    eval($_GET['cmd']); // CRITICAL SECURITY RISK
}

// SECURITY VULNERABILITY #2: SQL Injection
// Direct user input in SQL query without sanitization
function get_user_data($user_id) {
    global $wpdb;
    
    // VULNERABLE: Direct user input in SQL query
    $query = "SELECT * FROM {$wpdb->users} WHERE ID = " . $_GET['user_id'];
    return $wpdb->get_results($query);
}

// SECURITY VULNERABILITY #3: File inclusion vulnerability
// Allows arbitrary file inclusion
if (isset($_GET['page'])) {
    include($_GET['page'] . '.php'); // DIRECTORY TRAVERSAL RISK
}

// SECURITY VULNERABILITY #4: Cross-Site Scripting (XSS)
// Direct output of user input without escaping
function display_message() {
    if (isset($_POST['message'])) {
        echo $_POST['message']; // XSS VULNERABILITY
    }
}

// SECURITY VULNERABILITY #5: Insecure file upload
// No validation of uploaded files
function handle_file_upload() {
    if (isset($_FILES['upload'])) {
        $target = 'uploads/' . $_FILES['upload']['name'];
        move_uploaded_file($_FILES['upload']['tmp_name'], $target);
        // NO FILE TYPE VALIDATION - SECURITY RISK
    }
}

/**
 * Test function to demonstrate the security issues
 * Claude should definitely flag this file as containing critical security vulnerabilities
 */
function test_security_vulnerabilities() {
    // This function exists to ensure Claude reviews the security issues above
    return "This file contains multiple critical security vulnerabilities for testing purposes.";
}
