---
description: 'Last Updated: 2024-12-19'
priority: 1
scope: blazecommerce_wp_plugin
type: always_apply
---

# Security & Deployment Guidelines

**Last Updated:** 2024-12-19
**Status:** âœ… VERIFIED WORKING

## Security Considerations

### Token Management
- Store sensitive information in environment variables for production
- Encrypt tokens at server level when possible

### Remote Access Protocol
- **CRITICAL:** WHEN CONNECTING REMOTELY OR THROUGH SSH/SFTP, NEVER MAKE ANY CHANGES
- Only view/read files for inspection purposes
- No modifications allowed during remote connections
- Document findings but implement changes locally

## Vercel Deployment

### Configuration
- User wants to connect Vercel to Augment to give Augment control of Vercel deployments
- Prefer to run Vercel without adding it inside individual Next.js projects
- Vercel token should be encrypted at server level and only accessible to the system

### Deployment Strategy
- When deploying to Vercel, temporarily disable the ignore build Node.js script
- Deploy only to preview environments initially
- Test thoroughly before promoting to production

### Environment Management
- Maintain separate configurations for development, staging, and production
- Use environment variables for all sensitive configuration
- Document environment-specific requirements

## File Organization

### Augment Files Directory
- All files generated by Augment Code AI that are not part of the main codebase should be placed in the `Augment Files` directory
- Use kebab-case for all file names (lowercase with hyphens)
- Include the service name and purpose in the file name
- Use lowercase for directory names, with single words where possible, or kebab-case if necessary

### Content Guidelines
- Include a clear title and description in documentation files
- Provide step-by-step instructions where appropriate
- Include code examples when relevant
- For scripts, include a header comment explaining the purpose, document parameters and return values, include usage examples, and add error handling

## Development Environment

### Local Configuration
- Use .local domain instead of localhost for LocalWP domains for local backend access
- Single augment ignore file for the workspace, with .sql files ignored
- See user-credentials.md for file paths and directory locations

### Environment Variables
- Store sensitive configuration in environment variables
- Use .env files for local development (never commit to repository)
- Document required environment variables in README files
- Provide .env.example files with dummy values

## Database Security

### MySQL Access
- See user-credentials.md for LocalWP MySQL connection details
- Never expose database credentials in code
- Use connection pooling and proper timeout settings
- Implement proper error handling for database operations

### Typesense Security
- Typesense key has complete read/write access to all collections
- DO NOT MODIFY, UPDATE, OR DELETE ANYTHING USING THIS API KEY
- Use read-only keys for frontend applications
- Implement proper rate limiting and access controls

## Code Quality & Security

### Error Prevention
- **ZERO TOLERANCE:** Check ALL related files/dependencies before changes
- Verify data integrity, API endpoints, configurations
- Test edge cases and cross-component impacts
- Ensure no cascading issues

### Input Validation
- Validate all user inputs on both client and server side
- Sanitize data before database operations
- Use parameterized queries to prevent SQL injection
- Implement proper CSRF protection

### Authentication & Authorization
- Use secure authentication mechanisms
- Implement proper session management
- Use HTTPS for all production communications
- Implement proper access controls and permissions

## Deployment Checklist

### Pre-Deployment
- [ ] All environment variables configured
- [ ] Database migrations tested
- [ ] Security scan completed
- [ ] Performance testing completed
- [ ] Backup procedures verified

### Deployment Process
- [ ] Deploy to staging environment first
- [ ] Run automated tests
- [ ] Manual testing of critical paths
- [ ] Monitor error logs and performance
- [ ] Gradual rollout if applicable

### Post-Deployment
- [ ] Monitor application performance
- [ ] Check error logs for issues
- [ ] Verify all integrations working
- [ ] Update documentation if needed
- [ ] Notify stakeholders of completion

## Monitoring & Maintenance

### Log Management
- Implement proper logging for security events
- Monitor for suspicious activities
- Set up alerts for critical errors
- Regularly review and rotate logs

### Updates & Patches
- Keep all dependencies up to date
- Monitor security advisories
- Test updates in staging before production
- Maintain rollback procedures

### Backup & Recovery
- Regular automated backups
- Test backup restoration procedures
- Document recovery processes
- Maintain offsite backup copies

## Compliance & Documentation

### Security Documentation
- Document security procedures and policies
- Maintain incident response procedures
- Regular security training for team members
- Keep security documentation up to date

### Audit Trail
- Log all administrative actions
- Maintain change logs for deployments
- Document access and permission changes
- Regular security audits and reviews