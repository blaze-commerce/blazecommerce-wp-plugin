# BlazeCommerce WordPress Plugin Development Guidelines

## Table of Contents

1. [General Principles](#general-principles)
2. [ðŸš¨ MANDATORY Documentation Requirements](#-mandatory-documentation-requirements)
3. [Version Management & Release Process](#version-management--release-process)
4. [Code Structure & Organization](#code-structure--organization)
5. [DRY Principle Implementation](#dry-principle-implementation)
6. [Code Readability](#code-readability)
7. [WordPress/WooCommerce Specific Guidelines](#wordpresswoocommerce-specific-guidelines)
8. [Security Best Practices](#security-best-practices)
9. [Performance Guidelines](#performance-guidelines)
10. [Testing Standards](#testing-standards)
11. [Error Handling](#error-handling)
12. [Build Process & Automation](#build-process--automation)

## ðŸš¨ MANDATORY Documentation Requirements

**BREAKING CHANGE**: All code changes now require mandatory comprehensive documentation updates. No exceptions.

### 1. Documentation-First Development Workflow

**MANDATORY PROCESS**:
- **Every code change** MUST include corresponding documentation updates
- **New features** MUST have complete documentation before merge
- **Bug fixes** MUST update relevant documentation sections
- **PRs without complete documentation** will be rejected

### 2. Required Documentation Structure

**MANDATORY**: All changes MUST include comprehensive .md documentation files in the `/docs` directory:

```
/docs/
â”œâ”€â”€ README.md                    # Main documentation index
â”œâ”€â”€ CHANGELOG.md                 # Version history and changes
â”œâ”€â”€ SETUP.md                     # Installation and setup guide
â”œâ”€â”€ API.md                       # GraphQL API and endpoints reference
â”œâ”€â”€ FUNCTIONS.md                 # Custom functions documentation
â”œâ”€â”€ SECURITY.md                  # Security guidelines and practices
â”œâ”€â”€ PERFORMANCE.md               # Performance optimization guide
â”œâ”€â”€ TESTING.md                   # Testing procedures and standards
â”œâ”€â”€ TROUBLESHOOTING.md           # Common issues and solutions
â”œâ”€â”€ CONTRIBUTING.md              # Development contribution guide
â””â”€â”€ DEPLOYMENT.md                # Deployment and release procedures
```

### 3. Documentation Standards

**MANDATORY REQUIREMENTS**:
- **Every code change** MUST include corresponding documentation updates
- **New features** MUST have complete docs before merge
- **Bug fixes** MUST update relevant documentation sections
- **All documentation** MUST be written in clear, concise Markdown
- **Code examples** MUST be included for all functions and features
- **API endpoints** MUST include request/response examples
- **Screenshots** MUST be included for UI changes

### 4. Feature Documentation Requirements

**For every new feature, MUST create/update**:
- `/docs/FUNCTIONS.md` - Document all new functions with examples
- `/docs/API.md` - Document new GraphQL endpoints with queries
- `/docs/CHANGELOG.md` - Add detailed change log entry
- `/docs/README.md` - Update if feature affects overview
- `/docs/TESTING.md` - Add testing procedures for new features

### 5. Documentation Review Process

**MANDATORY CHECKS**:
- [ ] All relevant .md files updated
- [ ] Code examples tested and working
- [ ] API examples include request/response
- [ ] Screenshots updated for UI changes
- [ ] Links and references verified
- [ ] Spelling and grammar checked
- [ ] Documentation follows consistent formatting

## General Principles

### 1. Follow WordPress Coding Standards

- Use WordPress PHP Coding Standards (WPCS)
- Follow WordPress naming conventions for functions, classes, and variables
- Use proper indentation (tabs for indentation, spaces for alignment)
- Maximum line length of 120 characters
- Use proper PHP namespacing under `BlazeWooless`
- Maintain backward compatibility
- Document all public methods and classes

### 2. Plugin Architecture

- Use object-oriented programming with proper class structure
- Implement singleton pattern for main plugin class
- Use dependency injection where appropriate
- Follow MVC pattern for complex features

### 3. Commit Guidelines

- Follow conventional commit format: `type(scope): description`
- Types: feat, fix, docs, style, refactor, test, chore
- Include version bump in commit when releasing
- Use `>commit` shortcut for automated commits
- **MANDATORY**: All commits MUST include documentation updates

### 4. Documentation-First Development Workflow
**MANDATORY PROCESS**:
1. **Before coding**: Create/update relevant documentation files in `/docs/`
2. **During development**: Keep documentation updated with code changes
3. **Before commit**: Verify all documentation is complete and accurate
4. **No exceptions**: PRs without complete documentation will be rejected

**Documentation Commit Pattern**:
```
feat(api): add new GraphQL endpoint for product search

- Add product search resolver with filtering capabilities
- Include pagination and sorting options
- Add error handling for invalid queries

docs: document product search GraphQL endpoint
- Add endpoint to /docs/API.md with usage examples
- Include query parameters and response format
- Update /docs/CHANGELOG.md with new feature
```

## Version Management & Release Process

### 1. Version Management

- Plugin version is managed in two places:
  - Plugin header in `blaze-wooless.php` (line 6)
  - Version constant `BLAZE_COMMERCE_VERSION` (line 19)
- Both must be updated together for consistency
- Use semantic versioning (MAJOR.MINOR.PATCH)
- Document breaking changes clearly
- Maintain backward compatibility when possible

### 2. Release Process

1. Update version in both locations in `blaze-wooless.php`
2. Update CHANGELOG.md with release notes
3. Commit changes with conventional format
4. Create GitHub release with tag matching version
5. Automated workflow will build and package plugin

### 3. Dependencies

- Required plugins are managed via TGM Plugin Activation
- Keep dependency versions updated in plugin header
- Test compatibility when updating dependencies

## Code Structure & Organization

### 1. Directory Structure

```
/app         - Core plugin classes
/assets      - CSS/JS assets
/blocks      - Gutenberg blocks (has own package.json)
/lib         - Helper functions and utilities
/views       - Admin interface templates
/vendor      - Composer dependencies
```

### 2. File Naming Conventions

- Use descriptive names that reflect functionality
- Group related files in appropriate subdirectories

### 3. Class Organization

- One class per file
- Use proper namespacing
- Follow PSR-4 autoloading standards
- Place classes in logical directories based on functionality

## DRY Principle Implementation

### 1. Base Classes and Traits

- Create base classes for common functionality
- Use traits for shared methods across unrelated classes
- Example: `BaseCollection` for common collection operations
- Example: `SettingsTrait` for settings management

### 2. Utility Classes

- Create utility classes for frequently used operations
- Examples: `StringHelper`, `ArrayHelper`, `ValidationHelper`
- Keep utility methods static and stateless

### 3. Configuration Management

- Centralize configuration in dedicated classes
- Use constants for values that don't change
- Implement configuration inheritance for related settings

### 4. Template System

- Create reusable template components
- Use template inheritance and includes
- Avoid duplicating HTML structures

### 5. Common Patterns

```php
// Good: Centralized method
abstract class BaseCollection {
    protected function complete_sync($collection_type) {
        // Common sync completion logic
    }
}

// Bad: Repeated in each collection
class ProductCollection {
    public function complete_product_sync() {
        // Duplicated logic
    }
}
```

## Code Readability

### 1. Naming Conventions

- Use descriptive variable names: `$product_data` instead of `$data`
- Use verb-noun pattern for functions: `get_product_data()`, `update_user_meta()`
- Use meaningful class names that describe purpose
- Avoid abbreviations unless they're widely understood

### 2. Function Design

- Keep functions small and focused (single responsibility)
- Maximum 20-30 lines per function
- Use early returns to reduce nesting
- Limit function parameters (max 4-5, use arrays/objects for more)

### 3. Code Comments

```php
/**
 * Synchronizes product data with Typesense collection.
 *
 * @param array $product_data The product data to sync.
 * @param bool  $force_update Whether to force update existing records.
 * @return bool True on success, false on failure.
 */
public function sync_product_data($product_data, $force_update = false) {
    // Implementation
}
```

### 4. Code Formatting

- Use consistent indentation (WordPress standard: tabs)
- Add blank lines to separate logical blocks
- Align array elements for better readability
- Use meaningful variable names in loops

### 5. Conditional Logic

```php
// Good: Clear and readable
if ($this->is_product_valid($product) && $this->should_sync_product($product)) {
    return $this->perform_sync($product);
}

// Bad: Complex nested conditions
if ($product) {
    if (isset($product['id']) && $product['id'] > 0) {
        if ($this->sync_enabled) {
            // nested logic
        }
    }
}
```

## WordPress/WooCommerce Specific Guidelines

### 1. Hook Usage

- Use appropriate action and filter hooks
- Create custom hooks for extensibility
- Document hook parameters and usage
- Use consistent hook naming: `{plugin_prefix}/{context}/{action}`

### 2. Database Operations

- Use WordPress database abstraction layer ($wpdb)
- Sanitize all inputs before database operations
- Use prepared statements for dynamic queries
- Implement proper error handling for database operations

### 3. Settings API

- Use WordPress Settings API for admin options
- Implement proper validation and sanitization
- Use centralized settings management
- Provide default values for all settings

### 4. Transients and Caching

- Use WordPress transients for temporary data
- Implement proper cache invalidation
- Use object caching when available
- Set appropriate expiration times

### 5. Internationalization

- Make all user-facing strings translatable
- Use proper text domains
- Provide context for translators when needed
- Follow WordPress i18n best practices

## Security Best Practices

### 1. Input Validation

- Sanitize all user inputs
- Validate data types and formats
- Use WordPress sanitization functions
- Implement proper nonce verification

### 2. Output Escaping

- Escape all output using appropriate WordPress functions
- Use `esc_html()`, `esc_attr()`, `esc_url()` as needed
- Never trust user input or external data

### 3. Capability Checks

- Verify user capabilities before sensitive operations
- Use appropriate WordPress capability checks
- Implement role-based access control

### 4. SQL Injection Prevention

- Always use prepared statements
- Never concatenate user input into SQL queries
- Use WordPress database methods when possible

## Performance Guidelines

### 1. Database Optimization

- Minimize database queries
- Use efficient query structures
- Implement proper indexing
- Use batch operations for bulk data

### 2. Memory Management

- Unset large variables when no longer needed
- Use generators for large datasets
- Implement pagination for large result sets
- Monitor memory usage in long-running processes

### 3. Caching Strategy

- Cache expensive operations
- Use appropriate cache expiration times
- Implement cache warming strategies
- Consider external caching solutions

## Testing Standards

### ðŸš¨ MANDATORY Testing Requirements

**BREAKING CHANGE**: All PRs now require comprehensive test files and test cases. No exceptions.

### 1. Test File Requirements

**MANDATORY**: All PRs MUST include test files in the `/tests` directory:

```
/tests/
â”œâ”€â”€ unit/                    # Unit tests for individual functions/classes
â”œâ”€â”€ integration/             # Integration tests for WordPress/WooCommerce
â”œâ”€â”€ cli/                     # CLI command tests
â”œâ”€â”€ api/                     # GraphQL API endpoint tests
â”œâ”€â”€ fixtures/                # Test data and mock objects
â”œâ”€â”€ helpers/                 # Test helper functions
â””â”€â”€ bootstrap.php            # Test environment setup
```

### 2. Test Coverage Requirements

**MANDATORY COVERAGE**:
- [ ] **Unit Tests**: All new functions and methods (80%+ coverage)
- [ ] **Integration Tests**: WordPress/WooCommerce integration points
- [ ] **CLI Tests**: All WP-CLI commands and flags
- [ ] **API Tests**: All GraphQL endpoints and resolvers
- [ ] **Error Handling Tests**: Exception scenarios and edge cases
- [ ] **Performance Tests**: Memory usage and execution time
- [ ] **Compatibility Tests**: Plugin dependencies and versions

### 3. Test File Naming Conventions

**MANDATORY PATTERNS**:
- Unit tests: `test-{class-name}.php` or `test-{function-name}.php`
- Integration tests: `test-integration-{feature}.php`
- CLI tests: `test-cli-{command}.php`
- API tests: `test-api-{endpoint}.php`

### 4. Test Documentation Requirements

**MANDATORY**: Each test file MUST include:
- [ ] **Test purpose and scope** in file header
- [ ] **Setup and teardown procedures**
- [ ] **Test data requirements and fixtures**
- [ ] **Expected outcomes and assertions**
- [ ] **Edge cases and error scenarios**
- [ ] **Performance benchmarks where applicable**

### 5. Test Case Structure

**MANDATORY TEMPLATE**:
```php
<?php
/**
 * Test: {Feature Name}
 *
 * Purpose: {What this test validates}
 * Scope: {Unit/Integration/CLI/API}
 * Dependencies: {Required plugins/data}
 *
 * @package BlazeWooless
 * @subpackage Tests
 */

class Test_{FeatureName} extends WP_UnitTestCase {

    /**
     * Setup test environment
     */
    public function setUp(): void {
        parent::setUp();
        // Test setup code
    }

    /**
     * Test: {Specific functionality}
     *
     * @covers {ClassName::methodName}
     */
    public function test_{specific_functionality}() {
        // Arrange
        $expected = 'expected_value';

        // Act
        $result = $this->call_method_under_test();

        // Assert
        $this->assertEquals($expected, $result);
    }

    /**
     * Cleanup test environment
     */
    public function tearDown(): void {
        // Test cleanup code
        parent::tearDown();
    }
}
```

### 6. CLI Command Testing

**MANDATORY**: All CLI commands MUST have test files:
- [ ] **Success scenarios**: Normal operation with valid inputs
- [ ] **Error scenarios**: Invalid inputs and edge cases
- [ ] **Flag combinations**: All flag combinations tested
- [ ] **Output validation**: Command output matches expectations
- [ ] **Side effects**: Database changes, file operations verified

### 7. API Endpoint Testing

**MANDATORY**: All GraphQL endpoints MUST have test files:
- [ ] **Query validation**: Valid and invalid query structures
- [ ] **Response format**: Correct data structure and types
- [ ] **Authentication**: Proper access control testing
- [ ] **Error handling**: Graceful error responses
- [ ] **Performance**: Response time benchmarks

### 8. Test Data and Fixtures

**MANDATORY**: Create reusable test data:
- [ ] **Product fixtures**: Sample products for testing
- [ ] **User fixtures**: Test users with different roles
- [ ] **Settings fixtures**: Configuration presets
- [ ] **Mock objects**: External service mocks
- [ ] **Database fixtures**: Test database states

### 9. Automated Testing Integration

**MANDATORY**: Tests MUST be integrated into CI/CD:
- [ ] **GitHub Actions**: Automated test execution on PR
- [ ] **Test reports**: Coverage and performance reports
- [ ] **Failure notifications**: Clear error messages
- [ ] **Blocking merges**: Failed tests prevent merge

### 10. Legacy Testing Standards

- Write unit tests for all business logic
- Use PHPUnit for testing framework
- Aim for high code coverage (80%+)
- Mock external dependencies
- Test WordPress/WooCommerce integration points
- Test database operations
- Test API endpoints
- Use WordPress testing framework
- Test plugin with latest WordPress version
- Verify WooCommerce compatibility
- Test all required plugin dependencies
- Validate GraphQL endpoints functionality
- Use PHP_CodeSniffer with WordPress standards
- Implement continuous integration
- Use static analysis tools (PHPStan, Psalm)
- Regular code reviews

## Documentation Requirements (Legacy - See Mandatory Section Above)

### 1. Mandatory Documentation Structure
**MANDATORY**: All changes MUST include comprehensive .md documentation files in the `/docs` directory as outlined in the [Mandatory Documentation Requirements](#-mandatory-documentation-requirements) section above.

### 2. Documentation Standards
**MANDATORY REQUIREMENTS**:
- **Every code change** MUST include corresponding documentation updates
- **New features** MUST have complete documentation before merge
- **Bug fixes** MUST update relevant documentation sections
- **All documentation** MUST be written in clear, concise Markdown
- **Code examples** MUST be included for all functions and features
- **API endpoints** MUST include request/response examples with GraphQL queries
- **Screenshots** MUST be included for UI changes and new features

### 3. Code Documentation
- Document all public methods and classes with PHPDoc format
- Include inline comments for complex logic and algorithms
- Maintain comprehensive API documentation in `/docs/API.md`
- Document all GraphQL resolvers, queries, and mutations
- Document all WordPress hooks and filters used

### 4. Feature Documentation Requirements
**For every new feature, MUST create/update**:
- `/docs/FUNCTIONS.md` - Document all new functions with examples
- `/docs/API.md` - Document new GraphQL endpoints with usage examples
- `/docs/CHANGELOG.md` - Add detailed change log entry
- `/docs/TESTING.md` - Add testing procedures for new features
- `/docs/README.md` - Update if feature affects overview

### 5. User Documentation
- Maintain clear installation instructions in `/docs/SETUP.md`
- Document all settings and configuration options
- Keep troubleshooting guides updated in `/docs/TROUBLESHOOTING.md`
- Maintain plugin compatibility notes in `/docs/README.md`

### 6. Documentation Review Process
**MANDATORY CHECKS**:
- [ ] All relevant .md files updated
- [ ] Code examples tested and working
- [ ] GraphQL examples include queries and responses
- [ ] Screenshots updated for visual changes
- [ ] Links and references verified
- [ ] Spelling and grammar checked
- [ ] Documentation follows consistent formatting

## Error Handling

### 1. Exception Handling

- Use try-catch blocks for risky operations
- Create custom exception classes when needed
- Log errors appropriately
- Provide meaningful error messages

### 2. Logging

- Use WordPress logging functions
- Implement different log levels
- Include context in log messages
- Rotate logs to prevent disk space issues

### 3. Graceful Degradation

- Handle missing dependencies gracefully
- Provide fallback functionality when possible
- Display user-friendly error messages
- Maintain plugin functionality during partial failures

## Build Process & Automation

### 1. Build Process

- Run `yarn build` in `/blocks` directory after making block changes
- Ensure all assets are compiled before committing
- Test plugin functionality after build

### 2. Automation

- Version bumping is automated via npm scripts
- GitHub releases are created automatically on version tags
- Plugin ZIP is generated for distribution
- Changelog is updated automatically from commits

---

## Quick Reference Checklist

### Code Standards
- [ ] Follow WordPress coding standards
- [ ] Use descriptive naming conventions
- [ ] Implement DRY principle with base classes/traits
- [ ] Keep functions small and focused
- [ ] Sanitize inputs and escape outputs
- [ ] Use proper WordPress hooks and APIs
- [ ] Implement error handling and logging
- [ ] Write tests for critical functionality
- [ ] Optimize for performance and memory usage
- [ ] Update version in both locations when releasing
- [ ] Run build process after block changes
- [ ] Test plugin compatibility before release

### ðŸš¨ MANDATORY Documentation Checklist
- [ ] **REQUIRED**: Update `/docs/CHANGELOG.md` with detailed changes
- [ ] **REQUIRED**: Update `/docs/FUNCTIONS.md` for any new functions
- [ ] **REQUIRED**: Update `/docs/API.md` for new GraphQL endpoints
- [ ] **REQUIRED**: Update `/docs/TESTING.md` for new test procedures
- [ ] **REQUIRED**: Include code examples in all documentation
- [ ] **REQUIRED**: Add GraphQL query/response examples for API changes
- [ ] **REQUIRED**: Add screenshots for UI/visual changes
- [ ] **REQUIRED**: Test all documented code examples
- [ ] **REQUIRED**: Verify all documentation links work
- [ ] **REQUIRED**: Check spelling and grammar in all docs
- [ ] **REQUIRED**: Follow consistent Markdown formatting

### ðŸš¨ MANDATORY Testing Checklist
- [ ] **REQUIRED**: Create test files for all new functionality
- [ ] **REQUIRED**: Unit tests for all new functions/methods
- [ ] **REQUIRED**: Integration tests for WordPress/WooCommerce features
- [ ] **REQUIRED**: CLI tests for all command changes
- [ ] **REQUIRED**: API tests for GraphQL endpoint changes
- [ ] **REQUIRED**: Error handling and edge case tests
- [ ] **REQUIRED**: Test fixtures and mock data created
- [ ] **REQUIRED**: All tests pass locally before commit
- [ ] **REQUIRED**: Test coverage meets 80%+ requirement
- [ ] **REQUIRED**: Performance benchmarks for critical features

### Pre-Commit Requirements
- [ ] All relevant documentation files created/updated
- [ ] Documentation review checklist completed
- [ ] Code examples tested and verified working
- [ ] GraphQL examples tested with actual queries
- [ ] Screenshots captured for visual changes
- [ ] **REQUIRED**: All test files created and passing
- [ ] **REQUIRED**: Test coverage requirements met
- [ ] No merge allowed without complete documentation AND tests
